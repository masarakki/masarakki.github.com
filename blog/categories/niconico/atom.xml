<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: niconico | masarakki's blog]]></title>
  <link href="http://masarakki.github.com/blog/categories/niconico/atom.xml" rel="self"/>
  <link href="http://masarakki.github.com/"/>
  <updated>2013-12-25T21:16:29+09:00</updated>
  <id>http://masarakki.github.com/</id>
  <author>
    <name><![CDATA[masarakki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ゆっくりにアクセントをつけてみた]]></title>
    <link href="http://masarakki.github.com/blog/2012/10/07/make-yukkuri-to-use-accent/"/>
    <updated>2012-10-07T03:21:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/10/07/make-yukkuri-to-use-accent</id>
    <content type="html"><![CDATA[<h2>あらすじ</h2>

<p><em><a href="http://masarakki.github.com/blog/2012/09/22/yukkurid/">前回</a>、
棒読みちゃんと同じAquesTalkという音声合成エンジンを使い、
Linuxでも棒読みができるアプリケーションyukkuriを作った俺。</em></p>

<p><em>ところがこのyukkuriには致命的な欠陥があったのだ!!</em></p>

<h2>実際に喋らせてみた</h2>

<p>棒読みちゃん以上に棒読みだった。
完全に真っ平ら。ぺったんこ。
<strong>実は棒読みちゃんは棒読みじゃなかった</strong></p>

<p>どうやらAquesTalkは自分でアクセント記号を付けないといけないようです。
棒読みちゃんにもアクセント付きに変換された文字列が表示されます。</p>

<h2>アクセントの付け方</h2>

<p>やはりこのままmecabを使いたいので 「mecab アクセント」 でぐぐってみたところ、
<a href="http://www.tokuteicorpus.jp/dist/">Unidic</a>というmecab用アクセント辞書があるようです。
これを組み込めばアクセントがうまく処理できそうです。</p>

<p>アクセントの仕様はかなり複雑なので一部から実装していきます。
実際にニコ生で使って気になるアクセントがあったらテストを書いて修正していくという方法を取ります。</p>

<h2>アクセントのテストデータ</h2>

<p>アクセントの処理を実装するにあたって、もちろんテストデータが必要になります。</p>

<h4>方法1. 棒読みちゃんに喋らせてみてアクセント付き文字列を使う</h4>

<p>残念ながらLinuxではWineを使っても棒読みちゃんが動かなかったので断念。</p>

<h4>方法2. TASETのデモページを使う</h4>

<p><a href="https://sites.google.com/site/suzukimasayuki/accent">CRFを用いたアクセント結合推定</a>
というなんか難しいサイトの <a href="http://www.gavo.t.u-tokyo.ac.jp/~suzuki/taset_demo/">デモページ</a>
で文章にアクセントをつけることができます。
ただし変換にかなり時間がかかり、実際に喋らせてみるとなんかちょっと変です。</p>

<h4>方法3. 聞く</h4>

<p>2で作ったアクセントを実際に喋らせてみて、
自然に聞こえるように微調整するのが一番良さそうです。</p>

<p>ただし、細かい部分では<strong>正しい</strong>日本語の発音なんてのは知らないので、
こんなもんなのかで済ませます。</p>

<h2>結果</h2>

<p>たぶん棒読みちゃんより正確なアクセントが付けれるようになった。
確認は<a href="https://github.com/masarakki/yukkurid">コード</a>を実行してみるか、
<a href="http://com.nicovideo.jp/community/co600306">ニコ生の放送</a>を見てくださいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yukkurid]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/22/yukkurid/"/>
    <updated>2012-09-22T06:59:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/22/yukkurid</id>
    <content type="html"><![CDATA[<p><em>ゆっくりしていってね!</em></p>

<h2>yukkuridとは?</h2>

<p>棒読みちゃん+デーモン</p>

<p>ニコ生をするのに欠かせないの棒読みちゃんというWindowsアプリがありますが、
もちろんWindowsアプリなのでLinuxでは動きませんしWineで動くとしても動かしたくないですよね。</p>

<p>でもやっぱり棒読み機能がないと不便なので作ってみました。</p>

<p><a href="https://github.com/masarakki/yukkurid">yukkurid</a></p>

<h2>棒読み部分</h2>

<p>棒読みちゃんは内部で<a href="http://www.a-quest.com/">AquesTalk2</a>という読み上げライブラリを使用していて、
これはWindows版だけでなくMacOS版とLinux版のライブラリも配布されています。
<strong>(ただし有料)</strong></p>

<p>棒読みにはそんなに機能は必要無いので、ほとんどサンプルファイルをそのままコンパイルして、
十分実用なバイナリになりました。</p>

<h2>デーモン部分</h2>

<p>sinatraでちょちょっと作って終了です。
POSTで受け取ったデータを、漢字が読めない棒読みちゃんのためにmecabで読みに変換して、
棒読みちゃんに渡して吐かれたwavをALSAに食わせる。
ワンライナーで瞬殺です。</p>

<p>これでPOSTで送信するとコンピュータがゆっくり喋ってくれるようになりました!</p>

<h2>次の展望</h2>

<p>デーモンにさえすれば、実際にニコ生のコメントをchrome extensionから送信して、
コンピュータが喋ってくれるようになるはずです。
EroGetterの時もそうだったけどいちいちデーモンにするのがめんどくさいですがしかたないですね・・・</p>

<p>というわけでchrome extensionのコメビュを作るか既存のをどっかからパクってきて繋ぎこみたいと思います。</p>

<p>あとは今だと喋ってる間ブロックするので非同期化と、それにともなってちゃんとしたキューイングを。</p>

<h2>ところで</h2>

<p><a href="http://www.a-quest.com/licence_free.html">非商用の個人の開発ライセンス</a>を買ったのですが、</p>

<ul>
<li>アプリの機能として、外部ソフトから当社製品ライブラリの機能を呼び出し可能なインターフェースを持たないこと。</li>
</ul>


<p>ってどういうことなんだろう?
これをラップした raques.gem みたいなのは作っちゃダメなのかな?
.soと.hは自分で用意してねっていう形でならok?
といっても今コンパイル済みバイナリを ./bin/yukkuri に置いてるけど、これも.so無いと動かないよね?
かといって.so同梱できるようなライセンスじゃないよね? そんなんしたら商売上がったりだよね?
あんまC方面わからんからこのライセンスが一体何をしてよくて何をしていけないのかわからない。</p>
]]></content>
  </entry>
  
</feed>
