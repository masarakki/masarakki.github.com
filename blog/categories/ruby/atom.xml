<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | masarakki's blog]]></title>
  <link href="http://masarakki.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://masarakki.github.com/"/>
  <updated>2014-05-15T03:52:12+09:00</updated>
  <id>http://masarakki.github.com/</id>
  <author>
    <name><![CDATA[masarakki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[超チューニング祭に参加した]]></title>
    <link href="http://masarakki.github.com/blog/2014/04/29/cho-tuning/"/>
    <updated>2014-04-29T03:43:37+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/04/29/cho-tuning</id>
    <content type="html"><![CDATA[<p>ニコニコ超会議3のアサインされたブースは<a href="http://www.chokaigi.jp/2014/booth/cho_jikuken.html">超時空ニコニコ研究所</a>だったはずなんですが、
ブース説明会に参加して1時間半ほど真面目に説明を聞いていたところ、
最後の最後に「4人はハッカソン行ってね」と突然言われて「ファッ!?」ってなったわけです。</p>

<p>というわけで<a href="http://cyoppaya.kunikiya.jp/">超チューニング祭</a>に参加してきました。</p>

<h2>やったこと</h2>

<p><a href="http://github.com/masarakki/chokaigi">成果物</a></p>

<p>フロントエンドの専門知識があるわけでないので
<a href="http://takehora.hatenadiary.jp/entry/2014/04/17/072838">事前に指摘</a>されていたように、
特にフロントを弄ってスピードが改善されるような予感は全くありません。
デザインもできないので提供されたデータ一式には一切手を付けないことにしました。
なので配信周りで速くすることを目論みました。
(全員こっちの方は最低限やってくると思ったのに意外にほとんどの人は全くやってなかった)</p>

<h3>方針</h3>

<ul>
<li>配信を速くする</li>
<li>その処理をスクリプトで自動化する</li>
<li>元ファイルの構造は弄らない</li>
<li>現実に即した複数ページに応用可能なチューニング方法</li>
<li>計測には <a href="http://tools.pingdom.com/fpt/">http://tools.pingdom.com/fpt/</a> を使用</li>
</ul>


<h3>css と js を1ファイル化</h3>

<p>rails の assets pipeline がやっていることそのままです。
html をそのまま使うということで、明らかな罠である遅いサーバから配信されている jquery もあえてそのまま使います。
単純に html をパースして出てくる js と css を前から順に concat していくだけです。
リクエスト数は減らせましたが結局多いのは画像なのであまり意味ないです。</p>

<h3>html と css と js を minify</h3>

<p>rails では js の minify を <code>uglifier</code> を使っているのですが、css では何を使っているのか分からなかったので、
両方できるっぽい <code>yui-compressor</code> を使ってminifyしました。</p>

<p>html はもともと html5 だったので不要なタグをだいぶ削除できます。
<code>h5-min</code> という凄く古い gem を多少修正したら最新の ruby でも動作しました。</p>

<p>それぞれファイルサイズを20%程度削減できました。</p>

<p>この html の minify の段階で元ソースの文法的に間違った部分が悪影響を及ぼし、
レギュレーションを満たさなかったようです。</p>

<p>具体的には</p>

<p><code>html
&lt;a href="http://masarakki.github.com/hoge"&gt;
 &lt;p&gt;hoge&lt;/p&gt;
&lt;/a&gt;
</code></p>

<p>がアウトだったぽいです。</p>

<p>よく考えたらフロントのチューニングなのにブラウザのレンダリング結果は一度も見てなかったような気がします。</p>

<h3>AWS で配信</h3>

<p>とりあえず assets を s3 にアップロードしました。
これだけでだいぶ速くなります。
デプロイ先のサーバがだいぶアレだったぽいです。</p>

<p>そのあと CloudFront 経由でアクセスできるようにしました。
この効果は絶大で圧倒的に速くなりました。
pingdom の計測結果によると、Connect と Wait にかかる時間が圧倒的に削減されたようです。</p>

<p>ただ、Chrome の Developer Tool で見た場合、 s3 そのままのほうが全体的に速いという結果も出ました。
だいぶ謎いです。</p>

<h3>配信ドメインを増やす</h3>

<p>ブラウザには1つのドメインに対する同時接続は2までという紳士協定が(一応)あります。
CloudFront のドメインをたくさん作ってラウンドロビンすることで同時ダウンロード数を増やしました。
計測結果によると、1ドメインの場合、後半になるにつれて Connect にかかる時間が長くなっていたのが、
複数ドメインの場合ほとんど変化がないことが分かります。</p>

<p>ただ、ブラウザ全体(またはページ単位)での同時接続数もあるらしく、
増やしすぎてもすべて同時ダウンロードというわけにはいきませんでした。
1ドメインの時の Connect もそれほど遅いわけではないので、ほとんど誤差と言えると思います。
期待したほどの効果はありませんでした。</p>

<h2>HTTP compression</h2>

<p>css と js を圧縮して配信という昔ながらの方法は試してみましたが、
CloudFront での設定が面倒だった上に、
Receiving は短くなったものの Waiting が長くなって、合計値は素の状態より遅くなりました。
なぜ Waiting に計上されるのわからないけどこれがファイルを展開する時間なのでしょうか?
ネットワークが十分速い現代はもはや HTTP compression の必要が無いのかもしれません。</p>

<h2>できなかったこと</h2>

<p>画像を sprite 化すればかなり効果的だと予想できますが、
正方形に近くなるように詰め込むアルゴリズムでないと、
無限に非効率になってしまいそうです。
それを考えている時間はなかったので諦めました。</p>

<h2>結論</h2>

<p>RailsとAWS使え</p>

<h2>費用</h2>

<p>ファイル数も少ないし2日間の合計で アクセス数 35,500 転送量 250MB で1ドルもかかりませんでした。
ドメイン作りまくっても追加で費用がかかることもないようです。</p>

<h2>感想</h2>

<p>異種格闘技戦だけど自分のフィールドに持ち込んである程度戦えたような感じします。
結局計測方法の詳細がわからないので再検証できないのが辛いですねー。</p>

<p>あと優勝したデザイナの人のスライド見ても全然意味が分からなかったりしたのが衝撃的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gemの作り方まとめ 普通のgem編]]></title>
    <link href="http://masarakki.github.com/blog/2014/02/15/how-to-create-gem/"/>
    <updated>2014-02-15T06:39:24+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/02/15/how-to-create-gem</id>
    <content type="html"><![CDATA[<p>会社の人にgemの作り方まとめてくれって言われたので標準的なgemの作り方をまとめます。
標準的な作り方なので他の人が作ったgemを読み解くヒントにもなります。</p>

<p>とはいえ有名なgemは(有名なgemに限って)メッチャクチャだったりするので読みづらかったりします。
歴史が古かったりすると特にね。</p>

<h2>ジェネレータ</h2>

<p>まずはジェネレータを使ってプロジェクトを作りましょう。
昔はいろいろあったけど最近は <code>bundle</code> コマンドで大勢が決定してる感じです。</p>

<pre><code>bundle gem test_gem -t
</code></pre>

<p><code>-t</code> はテストも作成するオプションです。デフォルトでrspecを使うようになってます。
その他のオプションは</p>

<pre><code>bundle help gem
</code></pre>

<p>で確認できます。</p>

<p>Railsプラグインのgemを作る場合は</p>

<pre><code>rails plugin new test_gem
</code></pre>

<p>を使う方法もあります。
別記事で詳しく書く予定です。</p>

<h3>作成されるファイル</h3>

<p>作られるファイルの一覧はこんなかんじです</p>

<pre><code> create  test_gem/Gemfile
 create  test_gem/Rakefile
 create  test_gem/LICENSE.txt
 create  test_gem/README.md
 create  test_gem/.gitignore
 create  test_gem/test_gem.gemspec
 create  test_gem/lib/test_gem.rb
 create  test_gem/lib/test_gem/version.rb
 create  test_gem/.rspec
 create  test_gem/spec/spec_helper.rb
 create  test_gem/spec/test_gem_spec.rb
 create  test_gem/.travis.yml
</code></pre>

<h3>gem名について</h3>

<p>gem名の <code>-</code> はディレクトリ構造に変換されます。
例えば <code>test-gem</code> という名前で作ると <code>lib/test_gem.rb</code> だったところが <code>lib/test/gem.rb</code> のような構造になります。</p>

<p><code>Gemfile</code> 内で</p>

<p><code>ruby
gem 'test-gem'
</code></p>

<p>が正しくロードできるように
<code>lib/test-gem.rb</code> を作ってその中で</p>

<p><code>ruby
require 'test/gem'
</code></p>

<p>するといいでしょう。</p>

<h2>gemspec</h2>

<p>gemの中を見たことがなければgemspecというファイルは初見でしょう。
gemspecファイルはgemのメタデータが書かれています。</p>

<p>生成された直後はこんな内容になっています。</p>

<p>```ruby</p>

<h1>coding: utf-8</h1>

<p>lib = File.expand_path(&lsquo;../lib&rsquo;, <strong>FILE</strong>)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require &lsquo;test_gem/version&rsquo;</p>

<p>Gem::Specification.new do |spec|
  spec.name          = &ldquo;test_gem&rdquo;
  spec.version       = TestGem::VERSION
  spec.authors       = [&ldquo;HOGE&rdquo;]
  spec.email         = [&ldquo;<a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x68;&#x6f;&#x67;&#101;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#x68;&#x6f;&#103;&#x65;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#111;&#109;</a>&rdquo;]
  spec.description   = %q{TODO: Write a gem description}
  spec.summary       = %q{TODO: Write a gem summary}
  spec.homepage      = &ldquo;&rdquo;
  spec.license       = &ldquo;MIT&rdquo;</p>

<p>  spec.files         = <code>git ls-files</code>.split($/)
  spec.executables   = spec.files.grep(%r{^bin/}) { |f| File.basename(f) }
  spec.test_files    = spec.files.grep(%r{^(test|spec|features)/})
  spec.require_paths = [&ldquo;lib&rdquo;]</p>

<p>  spec.add_development_dependency &ldquo;bundler&rdquo;, &ldquo;~> 1.3&rdquo;
  spec.add_development_dependency &ldquo;rake&rdquo;
  spec.add_development_dependency &ldquo;rspec&rdquo;
end
```</p>

<p>まずTODOのところを埋めましょう。
spec.homepage にはgithubのurlを入れましょう。</p>

<p>このファイルで重要なのは依存するgemの設定です。
<code>add_dependency</code> と <code>add_development_dependency</code> を使って必要なgemを追加しましょう。
Gemfileはこの中身を参照しているので変更する必要はありません。</p>

<p>それ以外の設定はなるべくいじらないほうがいいです。</p>

<h2>中身の作成</h2>

<p>まず <code>lib/test_gem.rb</code> を見てみましょう。</p>

<p>```ruby
require &ldquo;test_gem/version&rdquo;</p>

<p>module TestGem
  # Your code goes here&hellip;
end
```</p>

<p>注目するのは TestGem が module だということです。
ここはなるべく module のままで、実際に色々やるのは下の class に任せましょう。</p>

<p>例えば Client という class を作るなら、 <code>lib/test_gem/client.rb</code> を作って</p>

<p>```ruby
module TestGem
  class Client</p>

<pre><code># codes
</code></pre>

<p>  end
end
```</p>

<p>な感じに書きます。
クラス構造とディレクトリ構造を一致させましょう。</p>

<p>それを <code>lib/test_gem.rb</code> でロードします。</p>

<p>```ruby
require &lsquo;test_gem/version&rsquo;
require &lsquo;test_gem/client&rsquo;</p>

<p>module TestGem
end
```</p>

<p>ActiveSupportのautoloadを使う場合は、</p>

<p>```ruby
require &lsquo;active_support/dependencies&rsquo;</p>

<p>module TestGem
  autoload :Client, &lsquo;test_gem/client&rsquo;
end
```</p>

<p>という感じになります。
Railsだと <code>Gemfile</code> に書いたgemを自動でrequireしてくれますが、ここではしてくれないので手動でrequireしなければいけません。</p>

<p>テストもディレクトリ構造を一致させましょう。
最初は <code>spec/test_gem_spec.rb</code> しかありません。
<code>spec/test_gem</code> ディレクトリを作り、 その中に <code>spec/test_gem/client_spec.rb</code> を作るという感じです。</p>

<p><code>guard</code> を使う場合は、</p>

<p><code>ruby
guard :rspec do
  watch(%r{^lib/(.+)\.rb$})     { |m| "spec/#{m[1]}_spec.rb" }
end
</code></p>

<p>と定義すればちょうどディレクトリ構造がぴったり合います。</p>

<h2>実行可能なコマンドを含める</h2>

<p>例えば <code>rspec</code> のような実行可能なコマンドも簡単に含めることができます。
<code>bin</code> ディレクトリを作り、その中に実行ファイルを入れるだけです。</p>

<p>コマンドなのでファイル名に <code>.rb</code> を付けないほうが見栄えがいいです。
例えば <code>bin/run_test_gem</code> というファイル名で</p>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>require &lsquo;test_gem&rsquo;</p>

<p>p TestGem::Client.new
```</p>

<p>のような内容にすると、 <code>run_test_gem</code> というコマンドが使えるようになります。</p>

<p>ただし普段rvmを使っているので、これに関してだけは他のシステムだとどうなるかちょっと分からないです。
rvmの場合、直接コマンドを実行せずにラッパースクリプト経由になるので</p>

<p><code>ruby
TestGem::Client.new
</code></p>

<p>だけで動いてしまいます。</p>

<h2>ビルドとかリリースとか</h2>

<p>ビルドやリリースはすべてrakeタスクが用意されています</p>

<pre><code>rake -T
</code></pre>

<p>で確認しましょう。</p>

<p>リリースの前は <code>lib/test_gem/version.rb</code> を手で編集してバージョン番号を上げないといけません。
(これのせいでjewelerが好きだった)</p>

<p>上記の実行可能コマンドを実際に試してみたいときは、<strong>対象ファイルをコミットして</strong></p>

<pre><code>rake install
</code></pre>

<p>でインストールしないと実行できないというよくハマりがちな罠があります。</p>

<h2>実際にどんなふうにクラス書いていけばいいの?</h2>

<p>他のgemをたくさん読みましょう。</p>

<p>よく知られているgemの多くはとにかく<strong>デカイ</strong>です。
構造を把握するだけでもかなり大変です。
小奇麗にまとまったgemを探して読んでみましょう。</p>

<h2>一番大事なこと</h2>

<p>コードにもコミットメッセージにも <strong>日本語を含めるべきではない</strong> 。</p>

<h2>もうちっとだけ続くんじゃ</h2>

<ul>
<li>Railsプラグインの作り方</li>
<li>C拡張を含むgemの作り方</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不自由なデプロイを強いられてる人のための capistrano-env ってgemを作った]]></title>
    <link href="http://masarakki.github.com/blog/2013/12/25/capistrano-env/"/>
    <updated>2013-12-25T19:52:42+09:00</updated>
    <id>http://masarakki.github.com/blog/2013/12/25/capistrano-env</id>
    <content type="html"><![CDATA[<p>capistrano-env ってgemを作った</p>

<h2>不自由なデプロイを強いられているんだッ</h2>

<p>すべての人間は大きく2種類に分割でき、それは自由なデプロイを許された人間と、不自由なデプロイを強いられた人間です。</p>

<p>不自由なデプロイを強いられる環境とは次のような環境のことをいいます。</p>

<ul>
<li>自動デプロイとかDevOpsとかの文化がない</li>
<li>特定の人しかデプロイの権限がない</li>
<li>その特定の人が現代的なクラウド文化を知らない</li>
<li>偉い人が手動神話を信仰している</li>
<li>システムを動かすのに絶対必須な情報を開発者が知ってはいけない</li>
</ul>


<p>以上はすべて妄想ですがもしかしたらこんな組織が実在するのかもしれません。
世の中には非常に便利なデプロイツールがあるのにこのような組織では上手く使うことが出来ません。</p>

<p>このgemはこのような不自由なデプロイを駆逐し、自由なデプロイの尖兵として賭けの攻勢に出るための武器です。</p>

<h2>秘密情報という曲者</h2>

<p>組織によっては開発者が知ってはいけない情報が設定されている場合があります。
DBサーバのパスワードやSALTなど、まあこのへんは納得できるんですが、
自分たちのAPIサーバのドメイン名を知らなかったり、何台のサーバで動いてるのかすら知ってはいけない、
なんて組織がもしかしたらあるかもしれません。</p>

<p>このあたりの情報は普通 <code>config/database.yml</code> とかに書いてリポジトリにコミットするわけですが、
秘密情報を含むファイルは作れないのでコミットできないことになります。
以前はどのようにしていたかというと、 <code>config/database.yml.template</code> とかのファイルをコミットし、
ローカルやテスト環境ではそれを <code>config/database.yml</code> にリネームするし、
本番にデプロイするときはインフラ担当が <em>手動で</em> 正しい情報に書き換えて配置します。</p>

<p>はいこんな思想で自動化できるわけがないですよね。
それどころかフレームワーク標準のファイルが存在しないという状況は開発者のCIすら阻害されてしまいます。</p>

<h2>heroku的解決</h2>

<p>設定をコードから分離するための仕組みとして、
herokuにはアプリケーションごとにconfigが設定できるようになってます。
アプリケーションからは環境変数を通してその値にアクセスできます。</p>

<p><code>
heroku config:set FOO=123
</code></p>

<p>こんなかんじに設定すると</p>

<p><code>ruby
ENV['FOO'] # =&gt; 123
</code></p>

<p>でアクセスできます。便利!
これなら同じコードを全く変更すること無く別のherokuアプリケーションとして動かすこともできますね。</p>

<h2>capistranoでENV設定</h2>

<p>capistranoでデプロイするときに、環境変数付きでサーバを起動することができます。</p>

<p><code>ruby
set :default_environment, ENV.select{ |k,v| k =~ /^MYAPP_/ }
</code></p>

<p>とか書けば <code>MYAPP_</code> から始まる環境変数を全部デプロイ時に渡すことができます。
アプリ側は ymlファイルの値が書いてある部分を <code>&lt;%= ENV['MYAPP_XXX'] %&gt;</code> とかに置き換えて、
ymlを読む前に一回 Erb を通すようにすれば完成です。</p>

<p>これでデプロイ担当者のマシンに環境変数を設定し、
そのマシンからcapistranoで自動化されたデプロイができるようになりました。</p>

<p>develop/test/staging なんかの環境は別に秘密じゃないとおもうのでymlに即値で書いてしまいましょう。</p>

<h2>unicornリスタート問題</h2>

<p>unicornは一瞬もサービスが途切れること無くサーバのリスタートができるのが特徴ですが、
これはシグナルを送ることによって実現しているので、
<strong>ENVを使った場合はリスタートしても設定の変更ができない</strong> という問題があります。</p>

<p>ENVを更新しようとすると一旦unicornをstopしてstartしなくてはいけません。
これではunicornの良さが損なわれるのでなるべくやりたくない方法です。</p>

<p>ここまで辿り着いた段階でもう既存の方法では厳しいと思いgemを作りました。</p>

<h2>capisrano-env がやっていること</h2>

<p>やってることは単純です。
環境変数を付けてデプロイするのをやめて、
代わりに <strong>環境変数を設定するファイル(コード)</strong> を一緒にデプロイします。
unicornをリスタートする前にも環境変数ファイルを毎回デプロイします。
動かすアプリケーションがRailsの場合は、
勝手にそのファイルを読み込んでrailsのブート中に環境変数を書き換えます。
<code>config/application.rb</code> などでymlの読み込みを始める前にはすでに環境変数が設定された状態になっています。</p>

<p>環境変数を設定するコードを実行するっていう気持ち悪さはありますが、
不自由な環境にいながら自動デプロイで幸せになるためにはこの方法しか考えられませんでした。
まぁ不自由な環境が実在するかどうかは定かではありませんが。</p>

<h2>使いかた</h2>

<p>deploy.rb</p>

<p>```ruby</p>

<p>require &lsquo;capistrano-env&rsquo;</p>

<p>capenv.use do |env|
  env.add /^MYAPP_/
end</p>

<p>```</p>

<p>ここまで書いててこれ自分で設定しなくて default_environment 拾ってくればいいんじゃねえのと思った</p>

<p>あと環境変数を設定するコードを吐く部分はフォーマッタって形で切り出してるから PhpFormatter とか作りたい人作っていいよ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[run ruby on supervisor with RVM]]></title>
    <link href="http://masarakki.github.com/blog/2013/02/14/supervisor-with-rvm/"/>
    <updated>2013-02-14T16:17:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2013/02/14/supervisor-with-rvm</id>
    <content type="html"><![CDATA[<h2>supervisorとは</h2>

<p>supervisorとは、pythonで書かれたプロセス監視ツールです。
簡単にインストールでき、デーモンとして動作し、
マシンブート時に任意のプログラムを立ち上げたり、そのプロセスが死んだ時に自動再起動などができます。</p>

<p>動かすプログラムは、単純な無限ループするようなコードでよく、
プロセス永続化などの面倒な仕事は全部supervisorに任せてしまえます。</p>

<h2>RVMで使う時の問題点</h2>

<p>RVMは個人環境にrubyをインストールし、実行するためには環境変数の整備などが必要で、
通常はシェルの起動時に設定スクリプトを読み込んで上手いことやってくれます。
ですが、supervisorを使う場合その方法が取れないのでなんとかしないといけません。</p>

<p>supervisorはenvironmentで環境変数を設定できるのですが、</p>

<p><code>
$ rvm env
</code></p>

<p>で出力した環境変数を使っても上手くいきませんでした。</p>

<p><code>
command=which bundle
</code></p>

<p>は想定したpathを返すのですが、</p>

<p><code>
command=bundle exec ...
</code></p>

<p>にすると bundle not found. と・・・</p>

<p><code>
command=cd /path/to/project ; bundle exec ...
</code></p>

<p>にしてみても、上手いこと解釈してくれないし、そもそもcdを見つけてくれません。 (シェル組み込みコマンドだから?)</p>

<p>もう意味わかりません。</p>

<h2>そう言えば昔wrapperってあったよね</h2>

<p>そういえば昔まだbundlerがなくてpassengerが主流だったときは、
rvm wrapper とかいうのやってそれを使えって書いてあるサイトが多かったと思います。
なんかマルっと環境を上手いことやってくれるものだっていう認識でした。
試してみましょう。</p>

<p>なんか適当に名前を付けてwrapperを作ります。
gemsetも一緒に hoge_task とかの名前にします。</p>

<p><code>
$ rvm wrapper 1.9.3-p385@hoge_task hoge_task bundle
</code></p>

<p>これで $HOME/.rvm/bin に hoge_task_bundle というコマンドができあがりました。
実際にフルパスでこのコマンドを叩くと hoge_task のgemsetを使ってbundleが動いているのがわかります。
supervisorのcommandの設定にこれを使えば良さそうです。</p>

<p>supervisorの設定ファイルは全体でこんな感じです</p>

<h3>/etc/supervisor/conf.d/hoge_task.conf</h3>

<p><code>
[program:hoge_task]
command=/home/{USERNAME}/.rvm/bin/hoge_task_bundle exec rackup -p 8000
autostart=true
autorestart=true
stopsignal=QUIT
stdout_logfile=/var/log/hoge_task/out.log
stderr_logfile=/var/log/hoge_task/err.log
user={USERNAME}
diretory=/home/{USERNAME}/projects/hoge_task
</code></p>

<p>あとは</p>

<p><code>
$ sudo supervisorctl reload
$ sudo supervisorctl status
</code></p>

<p>とかやって設定を読み込み直し、結果を見てみましょう。
多分うまく動き出してるはずですよ!</p>

<h2>Gemfileやruby自体の更新</h2>

<p>プログラムを変更してGemfileが変わった時や、
rubyのバージョンアップをした時などはどうなるのでしょうか?</p>

<p>これもGemfileのアップデートなら</p>

<p><code>
$ bundle install
</code></p>

<p>で、いつもどおりgemをインストールした後、(もちろん @hoge_task のgemsetを使って!)</p>

<p><code>
$ sudo supervisorctl restart hoge_task
</code></p>

<p>でプロセスを再起動すればいいはずです。</p>

<p>rubyを更新した場合は、新しいバージョンを指定してrvm wrapperを作りなおせば、
hoge_task_bundle の中身が書き換えられるので、supervisorの設定はそのままで大丈夫です。
あとは上と同様に bundle install してプロセスの再起動を指示します。</p>

<h2>もう何も怖くない</h2>

<p>これはsupervisorの設定と言うよりむしろ、
ユーザ環境にインストールされたrvmをシステムに近いところで使う汎用的な方法のようです。
自動でrackアプリを起動したり、バックグラウンドでタスクを回したり、いろいろできるようになりました。</p>

<p>というわけで仕事で使うメモでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CIでrubyのC拡張が入ったgemのテストをする方法]]></title>
    <link href="http://masarakki.github.com/blog/2012/11/04/how-to-travis-a-gem-with-c-extension/"/>
    <updated>2012-11-04T17:11:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/11/04/how-to-travis-a-gem-with-c-extension</id>
    <content type="html"><![CDATA[<h2>No Such File</h2>

<p>C拡張が含まれたgemをそのままTravisに流してみると、</p>

<pre><code>$ bundle exec rake
56/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/bin/ruby -S rspec spec/jpeg_spec.rb
57/home/vagrant/builds/masarakki/jpeg/spec/../lib/jpeg.rb:2:
  in `require': no such file to load -- jpeg.so (LoadError)
</code></pre>

<p>自分でコンパイルしないといけないみたいですね。</p>

<h2>とりあえずやってみた</h2>

<p>試しに.travis.ymlでコンパイルの命令を追加してみました。</p>

<p><code>yaml
before_script:
- cd ext ; ruby extconf.rb ; make install
</code></p>

<p>やった! Travisがテスト全部通したよ!!!</p>

<p>Travisの実行ログを見てみると、</p>

<pre><code>55$ cd ext ; ruby extconf.rb ; make install
56checking for jpeglib.h... yes
57checking for main() in -ljpeg... yes
58creating Makefile
59gcc -I. -I. -I/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/i686-linux -I. -DHAVE_JPEGLIB_H  -D_FILE_OFFSET_BITS=64  -fPIC -g -O2  -fPIC   -c jpeg.c
60gcc -I. -I. -I/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/i686-linux -I. -DHAVE_JPEGLIB_H  -D_FILE_OFFSET_BITS=64  -fPIC -g -O2  -fPIC   -c jpeg_error.c
61gcc -I. -I. -I/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/i686-linux -I. -DHAVE_JPEGLIB_H  -D_FILE_OFFSET_BITS=64  -fPIC -g -O2  -fPIC   -c jpeg_jpeg.c
62gcc -shared -o jpeg.so jpeg.o jpeg_error.o jpeg_jpeg.o -L. -L/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -Wl,-R/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -L.  -rdynamic -Wl,-export-dynamic    -Wl,-R -Wl,/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -L/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -lruby -ljpeg  -lrt -ldl -lcrypt -lm   -lc
63/usr/bin/install -c -m 0755 jpeg.so /home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/site_ruby/1.8/i686-linux



    ＿人人人人人人人人人＿
    ＞　site_ruby の下　＜
    ￣^Y^Y^Y^Y^Y^Y^Y^￣
</code></pre>

<p>これはダメですねヤバイですねやっちゃダメですね。</p>

<h2>rake-compiler を使う</h2>

<p><a href="https://github.com/luislavena/rake-compiler">rake-compiler</a> というgemを使うと上手いことやってくれるようです。</p>

<h4>gem追加</h4>

<p>Gemfileに以下を追加</p>

<p><code>ruby
gem 'rake-compiler'
</code></p>

<p>んで</p>

<pre><code>$ bundle install
</code></pre>

<h4>タスク追加</h4>

<p>Rakefileに以下を追加</p>

<p><code>ruby
if RUBY_PLATFORM =~ /java/
  require 'rake/javaextensiontask'
  Rake::JavaExtensionTask.new('GEM_NAME')
else
  require 'rake/extensiontask'
  Rake::ExtensionTask.new('GEM_NAME')
end
</code></p>

<h4>rake-compiler流にディレクトリ構成を直す</h4>

<p>ext直下にextconf.rbがある場合は、ext/GEM_NAME/extconf.rb の形になるようにディレクトリ構成を変更します。</p>

<h4>ためしてみる</h4>

<p>rake compile してみる</p>

<pre><code>$ rake compile
mkdir -p tmp/x86_64-linux/jpeg/1.9.3
cd tmp/x86_64-linux/jpeg/1.9.3
/home/masaki/.rvm/rubies/ruby-1.9.3-p194/bin/ruby -I. ../../../../ext/jpeg/extconf.rb
checking for jpeglib.h... yes
checking for main() in -ljpeg... yes
creating Makefile
cd -
cd tmp/x86_64-linux/jpeg/1.9.3
make
compiling ../../../../ext/jpeg/jpeg_jpeg.c
../../../../ext/jpeg/jpeg_jpeg.c: In function ‘jpeg_jpeg_exit’:
../../../../ext/jpeg/jpeg_jpeg.c:32:5: warning: format not a string literal and no format arguments [-Wformat-security]
compiling ../../../../ext/jpeg/jpeg.c
compiling ../../../../ext/jpeg/jpeg_error.c
linking shared-object jpeg.so
cd -
install -c tmp/x86_64-linux/jpeg/1.9.3/jpeg.so lib/jpeg.so
</code></pre>

<p>環境が汚れなさそうなのは確認できましたね。</p>

<p><em>warning直さないと・・・</em></p>

<h4>travisに教える</h4>

<p>.travis.yml に以下を追加 (もちろん前のは消して)</p>

<p><code>yaml
before_script:
 - rake compile
</code></p>

<h4>travisのログ確認</h4>

<pre><code>39$ rake compile
40mkdir -p tmp/i686-linux/jpeg/1.8.7
(中略)
54install -c tmp/i686-linux/jpeg/1.8.7/jpeg.so lib/jpeg.so
</code></pre>

<p>環境も汚してないしテストも通りました! やったね!</p>

<h2>参考</h2>

<ul>
<li><a href="https://travis-ci.org/#!/masarakki/jpeg">Travisの実行結果</a></li>
<li><a href="https://github.com/masarakki/jpeg">テスト対象プロジェクト</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
