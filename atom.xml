<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[masarakki's blog]]></title>
  <link href="http://masarakki.github.com/atom.xml" rel="self"/>
  <link href="http://masarakki.github.com/"/>
  <updated>2014-05-15T03:52:12+09:00</updated>
  <id>http://masarakki.github.com/</id>
  <author>
    <name><![CDATA[masarakki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ほぼ電子書籍に移行した話]]></title>
    <link href="http://masarakki.github.com/blog/2014/05/15/migrate-to-ebook/"/>
    <updated>2014-05-15T01:11:28+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/05/15/migrate-to-ebook</id>
    <content type="html"><![CDATA[<p>ほぼ電子書籍に移行して2年くらい経ちました。
ここ1年で紙の本は数十冊しか買ってないと思います。
ほとんどはkindleで、一部の本とエロ本はニコ書で買ってます。
ログを見ると去年1年でkindleで1200冊くらい買ってるようです。
紙で買っているのは最新な技術書、しばらく電子化されないことが確定している漫画、それと毎月の快楽天くらいです。</p>

<p>ほぼ完全に電子書籍に移行した結果の利点・欠点・変化などをまとめます。</p>

<h2>利点: 部屋が狭くならない</h2>

<p>家には本棚が4本あって、すべて本が詰まっていて、もうこれ以上本棚を置く場所がありません。
これまで紙の本を買うときは、保管をどうするかという罪悪感を感じながら買っていました。
結局置く場所がなくて床に山積みになっていて、足の踏み場がないという状態です。
こんな状態でも電子書籍なら何も気にすること無く購入できます。</p>

<p>逆に電子書籍で買い直しが進んだ結果、本棚1本分くらいは処分できそうです</p>

<h2>利点: いつでも買える</h2>

<p>ポチってダウンロードされるのをちょっと待つだけですぐ読めます。
革命的な便利さです。
amazonの普及により本屋に行くというダルいことをする必要はなくなり、これも十分に革命的でしたが、
人間は怠惰なので、今となってはamazonで注文した荷物を受け取るということがダルくてたまりません。
最近では、受け取ることを考えると億劫でポチる手を躊躇するということもあります。
電子書籍だと荷物を受け取るダルさも回避できるので、あとは本を読むダルさを何とかするだけです。
これに関しては買っても読まないという革命的なソリューションがあります。</p>

<p>さらにいうと、<a href="http://seiga.nicovideo.jp/book/series/15793">一部の本</a>は紙と電子同日発売していますが、
同日発売と言っても一日のスタートは深夜なので実店舗の開店や宅配便の到着より電子書籍の方が圧倒的に早く買えます。</p>

<h2>利点: 積ん読しやすい</h2>

<p>買っても読まないソリューションは完璧ですが、それでも気まぐれに買った本を読みたくなることがあるでしょう。
紙の本が床に積まれている場合、それは<a href="http://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF">スタック構造</a>になっています。
同じスタック上に同じシリーズの本が2冊積まれてしまった場合、古い巻が下に、新しい巻が上に積まれることになります。
紙は意外に結構重いので非力な人間ではスタックの途中から読みたい本を抜くことはできません。
この状態ではそのシリーズはもう2度と読み進むことができないことになります。
一方電子書籍は<a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%83%80%E3%83%A0%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9">ランダムアクセス</a>可能なので、どれだけ積ん読しても任意の巻から読むことができます。</p>

<h2>利点: 軽い</h2>

<p>技術書なら1冊分よりNexus7のほうが軽いです。
漫画でも2-3冊でNexus7のほうが軽くなります。
その軽い端末の中に数日間は活字に困らない数百冊の本が入ります。
必要なのはNexus7を入れるのに十分なサイズのケツポケがあるジーパンです。
端末ドリブンのジーパン選びは本当に重要です。</p>

<h2>利点: オナニーしやすい</h2>

<p>Flash版ニコ書プレイヤーに搭載されたFPSキーバインドにより、
右手が開放され非常にオナニーしやすくなっています。</p>

<h2>欠点: 画質が悪い</h2>

<p>小さな出版社ほどモワレが酷い・・・ 酷い・・・</p>

<h2>欠点: 知らない本に出逢いにくい</h2>

<p>kindleでもまだ全然レコメンドが生きてない感じします。
知らなかった漫画と偶然出逢う機会が紙の頃よりだいぶ減っている実感があります。
これの対処のために週に何度かとらのあなに行って面白そうな本を探してます。
面白そうな本があったら<a href="http://sinkan.net">新刊net</a>に登録してkindle版発売を待ちます。</p>

<h2>欠点?</h2>

<p>世間一般で欠点だと言われてそうなこと</p>

<ul>
<li>電子化されるのが遅い

<ul>
<li>気にしなければおk</li>
</ul>
</li>
<li>貸し借りできない

<ul>
<li>友達いねえよﾊﾞｰｶ</li>
<li>買えばいいだろ</li>
</ul>
</li>
<li>紙の暖かみがどうのこうの

<ul>
<li>そんなものは幻想だ</li>
</ul>
</li>
<li>プラットフォームが死んだらどうなんの?

<ul>
<li>まともなプラットフォームなら別サービスに移行できるように作ってるでしょ</li>
<li>安心して買えばおk</li>
</ul>
</li>
<li>販売停止がありうる

<ul>
<li>覚悟のあるプラットフォームを選べ</li>
<li>エロ本はニコ書で買ってます</li>
</ul>
</li>
<li>目が疲れる

<ul>
<li>どうせ寝てる時以外はモニタ見てんだから一緒だろ</li>
</ul>
</li>
</ul>


<h2>変化</h2>

<ul>
<li>たぶん買う量は増えた</li>
<li>読む量も増えた</li>
<li>本を入れるカバンを持たなくてもよくなった</li>
<li>部屋はこのあと片付く予定</li>
</ul>


<h2>番外編: 電子書籍を仕事にして良かったこと</h2>

<p>電子化されない本の情報が入ってくるので紙の本を買う決断が素早くできる点です。</p>

<p>さて、amazonから届いたあまんちゅの最新刊を読んできます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超チューニング祭に参加した]]></title>
    <link href="http://masarakki.github.com/blog/2014/04/29/cho-tuning/"/>
    <updated>2014-04-29T03:43:37+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/04/29/cho-tuning</id>
    <content type="html"><![CDATA[<p>ニコニコ超会議3のアサインされたブースは<a href="http://www.chokaigi.jp/2014/booth/cho_jikuken.html">超時空ニコニコ研究所</a>だったはずなんですが、
ブース説明会に参加して1時間半ほど真面目に説明を聞いていたところ、
最後の最後に「4人はハッカソン行ってね」と突然言われて「ファッ!?」ってなったわけです。</p>

<p>というわけで<a href="http://cyoppaya.kunikiya.jp/">超チューニング祭</a>に参加してきました。</p>

<h2>やったこと</h2>

<p><a href="http://github.com/masarakki/chokaigi">成果物</a></p>

<p>フロントエンドの専門知識があるわけでないので
<a href="http://takehora.hatenadiary.jp/entry/2014/04/17/072838">事前に指摘</a>されていたように、
特にフロントを弄ってスピードが改善されるような予感は全くありません。
デザインもできないので提供されたデータ一式には一切手を付けないことにしました。
なので配信周りで速くすることを目論みました。
(全員こっちの方は最低限やってくると思ったのに意外にほとんどの人は全くやってなかった)</p>

<h3>方針</h3>

<ul>
<li>配信を速くする</li>
<li>その処理をスクリプトで自動化する</li>
<li>元ファイルの構造は弄らない</li>
<li>現実に即した複数ページに応用可能なチューニング方法</li>
<li>計測には <a href="http://tools.pingdom.com/fpt/">http://tools.pingdom.com/fpt/</a> を使用</li>
</ul>


<h3>css と js を1ファイル化</h3>

<p>rails の assets pipeline がやっていることそのままです。
html をそのまま使うということで、明らかな罠である遅いサーバから配信されている jquery もあえてそのまま使います。
単純に html をパースして出てくる js と css を前から順に concat していくだけです。
リクエスト数は減らせましたが結局多いのは画像なのであまり意味ないです。</p>

<h3>html と css と js を minify</h3>

<p>rails では js の minify を <code>uglifier</code> を使っているのですが、css では何を使っているのか分からなかったので、
両方できるっぽい <code>yui-compressor</code> を使ってminifyしました。</p>

<p>html はもともと html5 だったので不要なタグをだいぶ削除できます。
<code>h5-min</code> という凄く古い gem を多少修正したら最新の ruby でも動作しました。</p>

<p>それぞれファイルサイズを20%程度削減できました。</p>

<p>この html の minify の段階で元ソースの文法的に間違った部分が悪影響を及ぼし、
レギュレーションを満たさなかったようです。</p>

<p>具体的には</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/hoge&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;p&gt;</span>hoge<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>がアウトだったぽいです。</p>

<p>よく考えたらフロントのチューニングなのにブラウザのレンダリング結果は一度も見てなかったような気がします。</p>

<h3>AWS で配信</h3>

<p>とりあえず assets を s3 にアップロードしました。
これだけでだいぶ速くなります。
デプロイ先のサーバがだいぶアレだったぽいです。</p>

<p>そのあと CloudFront 経由でアクセスできるようにしました。
この効果は絶大で圧倒的に速くなりました。
pingdom の計測結果によると、Connect と Wait にかかる時間が圧倒的に削減されたようです。</p>

<p>ただ、Chrome の Developer Tool で見た場合、 s3 そのままのほうが全体的に速いという結果も出ました。
だいぶ謎いです。</p>

<h3>配信ドメインを増やす</h3>

<p>ブラウザには1つのドメインに対する同時接続は2までという紳士協定が(一応)あります。
CloudFront のドメインをたくさん作ってラウンドロビンすることで同時ダウンロード数を増やしました。
計測結果によると、1ドメインの場合、後半になるにつれて Connect にかかる時間が長くなっていたのが、
複数ドメインの場合ほとんど変化がないことが分かります。</p>

<p>ただ、ブラウザ全体(またはページ単位)での同時接続数もあるらしく、
増やしすぎてもすべて同時ダウンロードというわけにはいきませんでした。
1ドメインの時の Connect もそれほど遅いわけではないので、ほとんど誤差と言えると思います。
期待したほどの効果はありませんでした。</p>

<h2>HTTP compression</h2>

<p>css と js を圧縮して配信という昔ながらの方法は試してみましたが、
CloudFront での設定が面倒だった上に、
Receiving は短くなったものの Waiting が長くなって、合計値は素の状態より遅くなりました。
なぜ Waiting に計上されるのわからないけどこれがファイルを展開する時間なのでしょうか?
ネットワークが十分速い現代はもはや HTTP compression の必要が無いのかもしれません。</p>

<h2>できなかったこと</h2>

<p>画像を sprite 化すればかなり効果的だと予想できますが、
正方形に近くなるように詰め込むアルゴリズムでないと、
無限に非効率になってしまいそうです。
それを考えている時間はなかったので諦めました。</p>

<h2>結論</h2>

<p>RailsとAWS使え</p>

<h2>費用</h2>

<p>ファイル数も少ないし2日間の合計で アクセス数 35,500 転送量 250MB で1ドルもかかりませんでした。
ドメイン作りまくっても追加で費用がかかることもないようです。</p>

<h2>感想</h2>

<p>異種格闘技戦だけど自分のフィールドに持ち込んである程度戦えたような感じします。
結局計測方法の詳細がわからないので再検証できないのが辛いですねー。</p>

<p>あと優勝したデザイナの人のスライド見ても全然意味が分からなかったりしたのが衝撃的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非エンジニアのためのOAuth講座]]></title>
    <link href="http://masarakki.github.com/blog/2014/02/21/oauth-for-non-engineer/"/>
    <updated>2014-02-21T02:00:08+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/02/21/oauth-for-non-engineer</id>
    <content type="html"><![CDATA[<h2>OAuthって何?</h2>

<p>いわゆるこういうのです</p>

<p><img src="http://masarakki.github.com/images/oauth_auth.png"></p>

<p>最近Twitterで <strong>スパムアプリがおっぱいポロリと勝手につぶやく</strong> といった事件が世間を賑わせています。
このままでは「OAuthは犯罪です!」なんて言い出す人が現れかねないので、
OAuthってどんなものなのか、Twitterを例に誤解されそうなところを簡単に説明したいと思います。</p>

<h2>誤解1: OAuthはユーザ認証の機能である</h2>

<p>多くのWebサイトに <strong>Twitterでログインする</strong> 機能があり、
上の画面をユーザ認証の仕組みだと思っている人は多いと思いますが、 <strong>大間違いです</strong> 。</p>

<p>OAuthは、他のアプリ(サイト)に対して、自分の代わりにTwitterにアクセスする権利を与える仕組みです。
その過程でユーザ情報がとれるので、ログインの代わりに使っているアプリが多いのですが、本来は間違った使い方です。
他のサービスを使ってユーザ認証をする仕組みに <strong>OpenID</strong> というOAuthの兄弟規格のようなものがあるのですが、
対応しているサービスも少なくイマイチ流行ってません。</p>

<p>何はともあれOAuthの許可をすると、Twitterの操作をする権限をアプリに与えてしまします。
信頼できないアプリに対して許可なんか与えたらダメです。
何ができるかは許可画面に書かれているので <strong>よく読みましょう</strong> 。
上の画像の場合は、</p>

<ul>
<li>tweetが読めるよ</li>
<li>フォローしてる人が見れるよ</li>
<li>プロフィール変更できるよ</li>
<li>tweetできるよ</li>
</ul>


<p>と書かれています。</p>

<p>Twitterは親切で何ができないかも書いてあります。</p>

<ul>
<li>ダイレクトメッセージにはアクセスできないよ</li>
<li>パスワードは見れないよ</li>
</ul>


<p>どこまで権利を欲しがるかはアプリによって違うので <strong>きちんと読みましょう</strong> 。</p>

<h4>まとめ</h4>

<ul>
<li>OAuthは他のアプリに権限を渡す仕組みだよ</li>
<li>許可画面はよく読もう</li>
<li>信頼できないアプリを許可したらダメだよ</li>
</ul>


<h2>誤解2: 念のためパスワード変えたほうがいい</h2>

<p>スパム系アプリが流行すると、パスワード変えたほうがいいという人が必ず現れますが、<strong>全く不要です</strong>。
むしろパスワード変えないとヤバイよと煽って来る人は、
<strong>罠にかけようとしている可能性もあるので警戒したほうがいいです</strong>。</p>

<p>まともなサービスなら、OAuthで許可を得ていても <strong>アプリからパスワードは見えないし変更もできません</strong> 。
そもそもパスワードは元の文字列に復元できない方法でデータベースに保存されています。</p>

<p>アプリとサービスは、OAuthの許可を与えた時に発行される <strong>アクセストークン</strong> という文字列を使ってやりとりします。
なのでアプリはパスワードを一切知ることはないし、知る必要もありません。
もしアプリ側でパスワードを入力させようとしてきたら <strong>完全に罠です</strong>。</p>

<p>アプリの許可を取り消せば、アクセストークンが無効化されて、それ以降アプリはアクセスできなくなります。
あとは勝手にされたtweet消したり勝手にされたフォロー外したりは手動でやる必要があります。</p>

<h4>まとめ</h4>

<ul>
<li>パスワードは変えなくていいよ</li>
<li>アプリがパスワード入力を求めてきたら罠だよ</li>
<li>許可を取り消せばそれっきりだよ</li>
<li>ビビって騙されないように</li>
</ul>


<h2>誤解3: OAuthは安全である</h2>

<p>条件が揃えば、結構簡単にアプリのなりすましが可能です。(特にスマートフォンアプリ)</p>

<p>アプリにはいくつかOAuthのための設定がありますが、
それを全く同じにして別のアプリを作ると、本物になりすますことが可能です。</p>

<p>信頼できるアプリを許可をしたあと、自動でアプリに戻って来るタイミングで、
<strong>複数のアプリ候補</strong> (Androidの場合 他のOSは知らん) がある場合は、その中に偽物が含まれていると思っていいでしょう。
まだこの時 <strong>アクセストークン</strong> は発行されていないので、ここでストップすれば乗っ取りは防げます。
しかし、もし間違って偽アプリを選んでしまったら、 <strong>偽アプリがアクセストークンを取得してしまいます</strong>。
つまりその瞬間になりすましが成立します。</p>

<p>アプリ選択画面が出てくるのはまだマシな方で、
もしこれが、もう使ってなくて <strong>アンインストールしたアプリ</strong> と同じ設定を使っていた場合、
アプリ選択画面すら出ずに <strong>偽アプリがアクセストークンを取得してなりすまします</strong>。
過去に許可していて、その許可がまだ有効な場合は <strong>許可画面すら出ずに</strong> 偽アプリがなりすますこともあります。</p>

<p>Webアプリの場合はスマートフォンアプリほどなりすましは簡単ではないですが、
<strong>ドメインごと盗まれた場合</strong> はなりすまし可能です。
<strong>信頼できないDNSを使っている場合</strong> もなりすまし可能です。
サービスを運営する会社が <strong>買収された時</strong> は買収会社の動きに注目したほうがいいです。</p>

<p>なりすまされた場合、許可したアプリ一覧に出てくる名前は <strong>信頼できるアプリ</strong> なので、
何が犯人なのかなかなか気づきにくいです。</p>

<h4>まとめ</h4>

<ul>
<li>アプリ候補が複数出たら怪しいからストップしたほうがいいよ</li>
<li>アプリを消したら許可も取り消そう</li>
<li>定期的にリストをチェックして使ってないアプリは全部取り消そう</li>
<li>犯人がわからない時はアプリの許可を全部取り消せばとりあえず問題解決</li>
</ul>


<h2>さいごに</h2>

<p>OAuthは、ユーザIDやパスワードを漏らすこと無く、他のアプリにアクセス権を与える仕組みで、
過去にあった <strong>IDとパスワードを保存して代理アクセスするアプリ</strong> に比べたら <strong>格段に安全</strong> な手段です。
エンジニア視点からしても、<strong>知らなくていいこと(パスワード)を知らないままでいられる</strong> 非常に便利な仕組みで、
今後さまざまなサービスがOAuthでのアクセスを提供するようになると思います。
そういう時代なので上記の内容を最低限知っておいたほうがいいと思います。</p>

<p>ただやはり気軽に許可できるものではないので、アプリを許可する際はよく読んでよく考えてよく疑ってかかりましょう。</p>

<p>あとOpenIDは事実上死んでいるので <strong>何もできないOAuth</strong> として再定義されるべきだと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[山城が死んだ]]></title>
    <link href="http://masarakki.github.com/blog/2014/02/16/yamashiro-ga-shinda/"/>
    <updated>2014-02-16T10:37:48+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/02/16/yamashiro-ga-shinda</id>
    <content type="html"><![CDATA[<p>飯田橋のカフェを貸し切って山城のお別れ会。</p>

<p>LTしたり、花火打ち上げたり、カネ貸したまま返ってこない暴露話をしたり、
山城の恥ずかしいツイートを見ながら遺品山分けゲーム大会したり、
MBAでスイカ割ったり、MBAにベルギービール飲ましたり、
クズが集まってクズなどんちゃん騒ぎをして最高に楽しかった。</p>

<p>ただ、
楽しい場所には必ずいるはずの奴がいない。
いつも輪の中心で延々イジられ続けてるはずの奴がいない。
哀しい。
いたのかもしれないけど生きてる人間には見れない。
哀しい。</p>

<p>つーか死んでんじゃねえよバカ</p>

<p>あと俺が死んだ時もLT大会で盛大に送ってほしいと思った</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gemの作り方まとめ 普通のgem編]]></title>
    <link href="http://masarakki.github.com/blog/2014/02/15/how-to-create-gem/"/>
    <updated>2014-02-15T06:39:24+09:00</updated>
    <id>http://masarakki.github.com/blog/2014/02/15/how-to-create-gem</id>
    <content type="html"><![CDATA[<p>会社の人にgemの作り方まとめてくれって言われたので標準的なgemの作り方をまとめます。
標準的な作り方なので他の人が作ったgemを読み解くヒントにもなります。</p>

<p>とはいえ有名なgemは(有名なgemに限って)メッチャクチャだったりするので読みづらかったりします。
歴史が古かったりすると特にね。</p>

<h2>ジェネレータ</h2>

<p>まずはジェネレータを使ってプロジェクトを作りましょう。
昔はいろいろあったけど最近は <code>bundle</code> コマンドで大勢が決定してる感じです。</p>

<pre><code>bundle gem test_gem -t
</code></pre>

<p><code>-t</code> はテストも作成するオプションです。デフォルトでrspecを使うようになってます。
その他のオプションは</p>

<pre><code>bundle help gem
</code></pre>

<p>で確認できます。</p>

<p>Railsプラグインのgemを作る場合は</p>

<pre><code>rails plugin new test_gem
</code></pre>

<p>を使う方法もあります。
別記事で詳しく書く予定です。</p>

<h3>作成されるファイル</h3>

<p>作られるファイルの一覧はこんなかんじです</p>

<pre><code> create  test_gem/Gemfile
 create  test_gem/Rakefile
 create  test_gem/LICENSE.txt
 create  test_gem/README.md
 create  test_gem/.gitignore
 create  test_gem/test_gem.gemspec
 create  test_gem/lib/test_gem.rb
 create  test_gem/lib/test_gem/version.rb
 create  test_gem/.rspec
 create  test_gem/spec/spec_helper.rb
 create  test_gem/spec/test_gem_spec.rb
 create  test_gem/.travis.yml
</code></pre>

<h3>gem名について</h3>

<p>gem名の <code>-</code> はディレクトリ構造に変換されます。
例えば <code>test-gem</code> という名前で作ると <code>lib/test_gem.rb</code> だったところが <code>lib/test/gem.rb</code> のような構造になります。</p>

<p><code>Gemfile</code> 内で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;test-gem&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>が正しくロードできるように
<code>lib/test-gem.rb</code> を作ってその中で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/gem&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>するといいでしょう。</p>

<h2>gemspec</h2>

<p>gemの中を見たことがなければgemspecというファイルは初見でしょう。
gemspecファイルはgemのメタデータが書かれています。</p>

<p>生成された直後はこんな内容になっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'><span class="n">lib</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span> <span class="k">unless</span> <span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test_gem/version&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Gem</span><span class="p">:</span><span class="ss">:Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">spec</span><span class="o">|</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">name</span>          <span class="o">=</span> <span class="s2">&quot;test_gem&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">version</span>       <span class="o">=</span> <span class="ss">TestGem</span><span class="p">:</span><span class="ss">:VERSION</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">authors</span>       <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;HOGE&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">email</span>         <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;hoge@example.com&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">description</span>   <span class="o">=</span> <span class="sx">%q{TODO: Write a gem description}</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">summary</span>       <span class="o">=</span> <span class="sx">%q{TODO: Write a gem summary}</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">homepage</span>      <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">license</span>       <span class="o">=</span> <span class="s2">&quot;MIT&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">files</span>         <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="vg">$/</span><span class="p">)</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">executables</span>   <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^bin/}</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">test_files</span>    <span class="o">=</span> <span class="n">spec</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">%r{^(test|spec|features)/}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">require_paths</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;lib&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;bundler&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 1.3&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rake&quot;</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rspec&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>まずTODOのところを埋めましょう。
spec.homepage にはgithubのurlを入れましょう。</p>

<p>このファイルで重要なのは依存するgemの設定です。
<code>add_dependency</code> と <code>add_development_dependency</code> を使って必要なgemを追加しましょう。
Gemfileはこの中身を参照しているので変更する必要はありません。</p>

<p>それ以外の設定はなるべくいじらないほうがいいです。</p>

<h2>中身の作成</h2>

<p>まず <code>lib/test_gem.rb</code> を見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;test_gem/version&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">TestGem</span>
</span><span class='line'>  <span class="c1"># Your code goes here...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>注目するのは TestGem が module だということです。
ここはなるべく module のままで、実際に色々やるのは下の class に任せましょう。</p>

<p>例えば Client という class を作るなら、 <code>lib/test_gem/client.rb</code> を作って</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">TestGem</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Client</span>
</span><span class='line'>    <span class="c1"># codes</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>な感じに書きます。
クラス構造とディレクトリ構造を一致させましょう。</p>

<p>それを <code>lib/test_gem.rb</code> でロードします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test_gem/version&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test_gem/client&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">TestGem</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActiveSupportのautoloadを使う場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/dependencies&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">TestGem</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Client</span><span class="p">,</span> <span class="s1">&#39;test_gem/client&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>という感じになります。
Railsだと <code>Gemfile</code> に書いたgemを自動でrequireしてくれますが、ここではしてくれないので手動でrequireしなければいけません。</p>

<p>テストもディレクトリ構造を一致させましょう。
最初は <code>spec/test_gem_spec.rb</code> しかありません。
<code>spec/test_gem</code> ディレクトリを作り、 その中に <code>spec/test_gem/client_spec.rb</code> を作るという感じです。</p>

<p><code>guard</code> を使う場合は、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="ss">:rspec</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^lib/(.+)\.rb$}</span><span class="p">)</span>     <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>と定義すればちょうどディレクトリ構造がぴったり合います。</p>

<h2>実行可能なコマンドを含める</h2>

<p>例えば <code>rspec</code> のような実行可能なコマンドも簡単に含めることができます。
<code>bin</code> ディレクトリを作り、その中に実行ファイルを入れるだけです。</p>

<p>コマンドなのでファイル名に <code>.rb</code> を付けないほうが見栄えがいいです。
例えば <code>bin/run_test_gem</code> というファイル名で</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;test_gem&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="ss">TestGem</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>のような内容にすると、 <code>run_test_gem</code> というコマンドが使えるようになります。</p>

<p>ただし普段rvmを使っているので、これに関してだけは他のシステムだとどうなるかちょっと分からないです。
rvmの場合、直接コマンドを実行せずにラッパースクリプト経由になるので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">TestGem</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>だけで動いてしまいます。</p>

<h2>ビルドとかリリースとか</h2>

<p>ビルドやリリースはすべてrakeタスクが用意されています</p>

<pre><code>rake -T
</code></pre>

<p>で確認しましょう。</p>

<p>リリースの前は <code>lib/test_gem/version.rb</code> を手で編集してバージョン番号を上げないといけません。
(これのせいでjewelerが好きだった)</p>

<p>上記の実行可能コマンドを実際に試してみたいときは、<strong>対象ファイルをコミットして</strong></p>

<pre><code>rake install
</code></pre>

<p>でインストールしないと実行できないというよくハマりがちな罠があります。</p>

<h2>実際にどんなふうにクラス書いていけばいいの?</h2>

<p>他のgemをたくさん読みましょう。</p>

<p>よく知られているgemの多くはとにかく<strong>デカイ</strong>です。
構造を把握するだけでもかなり大変です。
小奇麗にまとまったgemを探して読んでみましょう。</p>

<h2>一番大事なこと</h2>

<p>コードにもコミットメッセージにも <strong>日本語を含めるべきではない</strong> 。</p>

<h2>もうちっとだけ続くんじゃ</h2>

<ul>
<li>Railsプラグインの作り方</li>
<li>C拡張を含むgemの作り方</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不自由なデプロイを強いられてる人のための Capistrano-env ってgemを作った]]></title>
    <link href="http://masarakki.github.com/blog/2013/12/25/capistrano-env/"/>
    <updated>2013-12-25T19:52:42+09:00</updated>
    <id>http://masarakki.github.com/blog/2013/12/25/capistrano-env</id>
    <content type="html"><![CDATA[<p>capistrano-env ってgemを作った</p>

<h2>不自由なデプロイを強いられているんだッ</h2>

<p>すべての人間は大きく2種類に分割でき、それは自由なデプロイを許された人間と、不自由なデプロイを強いられた人間です。</p>

<p>不自由なデプロイを強いられる環境とは次のような環境のことをいいます。</p>

<ul>
<li>自動デプロイとかDevOpsとかの文化がない</li>
<li>特定の人しかデプロイの権限がない</li>
<li>その特定の人が現代的なクラウド文化を知らない</li>
<li>偉い人が手動神話を信仰している</li>
<li>システムを動かすのに絶対必須な情報を開発者が知ってはいけない</li>
</ul>


<p>以上はすべて妄想ですがもしかしたらこんな組織が実在するのかもしれません。
世の中には非常に便利なデプロイツールがあるのにこのような組織では上手く使うことが出来ません。</p>

<p>このgemはこのような不自由なデプロイを駆逐し、自由なデプロイの尖兵として賭けの攻勢に出るための武器です。</p>

<h2>秘密情報という曲者</h2>

<p>組織によっては開発者が知ってはいけない情報が設定されている場合があります。
DBサーバのパスワードやSALTなど、まあこのへんは納得できるんですが、
自分たちのAPIサーバのドメイン名を知らなかったり、何台のサーバで動いてるのかすら知ってはいけない、
なんて組織がもしかしたらあるかもしれません。</p>

<p>このあたりの情報は普通 <code>config/database.yml</code> とかに書いてリポジトリにコミットするわけですが、
秘密情報を含むファイルは作れないのでコミットできないことになります。
以前はどのようにしていたかというと、 <code>config/database.yml.template</code> とかのファイルをコミットし、
ローカルやテスト環境ではそれを <code>config/database.yml</code> にリネームするし、
本番にデプロイするときはインフラ担当が <em>手動で</em> 正しい情報に書き換えて配置します。</p>

<p>はいこんな思想で自動化できるわけがないですよね。
それどころかフレームワーク標準のファイルが存在しないという状況は開発者のCIすら阻害されてしまいます。</p>

<h2>heroku的解決</h2>

<p>設定をコードから分離するための仕組みとして、
herokuにはアプリケーションごとにconfigが設定できるようになってます。
アプリケーションからは環境変数を通してその値にアクセスできます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>heroku config:set FOO=123</span></code></pre></td></tr></table></div></figure>


<p>こんなかんじに設定すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOO&#39;</span><span class="o">]</span> <span class="c1"># =&gt; 123</span>
</span></code></pre></td></tr></table></div></figure>


<p>でアクセスできます。便利!
これなら同じコードを全く変更すること無く別のherokuアプリケーションとして動かすこともできますね。</p>

<h2>capistranoでENV設定</h2>

<p>capistranoでデプロイするときに、環境変数付きでサーバを起動することができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:default_environment</span><span class="p">,</span> <span class="no">ENV</span><span class="o">.</span><span class="n">select</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">k</span> <span class="o">=~</span> <span class="sr">/^MYAPP_/</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とか書けば <code>MYAPP_</code> から始まる環境変数を全部デプロイ時に渡すことができます。
アプリ側は ymlファイルの値が書いてある部分を <code>&lt;%= ENV['MYAPP_XXX'] %&gt;</code> とかに置き換えて、
ymlを読む前に一回 Erb を通すようにすれば完成です。</p>

<p>これでデプロイ担当者のマシンに環境変数を設定し、
そのマシンからcapistranoで自動化されたデプロイができるようになりました。</p>

<p>develop/test/staging なんかの環境は別に秘密じゃないとおもうのでymlに即値で書いてしまいましょう。</p>

<h2>unicornリスタート問題</h2>

<p>unicornは一瞬もサービスが途切れること無くサーバのリスタートができるのが特徴ですが、
これはシグナルを送ることによって実現しているので、
<strong>ENVを使った場合はリスタートしても設定の変更ができない</strong> という問題があります。</p>

<p>ENVを更新しようとすると一旦unicornをstopしてstartしなくてはいけません。
これではunicornの良さが損なわれるのでなるべくやりたくない方法です。</p>

<p>ここまで辿り着いた段階でもう既存の方法では厳しいと思いgemを作りました。</p>

<h2>capisrano-env がやっていること</h2>

<p>やってることは単純です。
環境変数を付けてデプロイするのをやめて、
代わりに <strong>環境変数を設定するファイル(コード)</strong> を一緒にデプロイします。
unicornをリスタートする前にも環境変数ファイルを毎回デプロイします。
動かすアプリケーションがRailsの場合は、
勝手にそのファイルを読み込んでrailsのブート中に環境変数を書き換えます。
<code>config/application.rb</code> などでymlの読み込みを始める前にはすでに環境変数が設定された状態になっています。</p>

<p>環境変数を設定するコードを実行するっていう気持ち悪さはありますが、
不自由な環境にいながら自動デプロイで幸せになるためにはこの方法しか考えられませんでした。
まぁ不自由な環境が実在するかどうかは定かではありませんが。</p>

<h2>使いかた</h2>

<p>deploy.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano-env&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">capenv</span><span class="o">.</span><span class="n">use</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="n">env</span><span class="o">.</span><span class="n">add</span> <span class="sr">/^MYAPP_/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで書いててこれ自分で設定しなくて default_environment 拾ってくればいいんじゃねえのと思った</p>

<p>あと環境変数を設定するコードを吐く部分はフォーマッタって形で切り出してるから PhpFormatter とか作りたい人作っていいよ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java-ja Kowai]]></title>
    <link href="http://masarakki.github.com/blog/2013/03/22/java-ja-kowai/"/>
    <updated>2013-03-22T22:16:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2013/03/22/java-ja-kowai</id>
    <content type="html"><![CDATA[<h1>java-ja.DDD 行ってきました</h1>

<p><strong>java-ja 怖い</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Url Cool]]></title>
    <link href="http://masarakki.github.com/blog/2013/03/16/make-url-cool/"/>
    <updated>2013-03-16T17:53:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2013/03/16/make-url-cool</id>
    <content type="html"><![CDATA[<h2>Railsでurlをカッコ良くする</h2>

<p>railsで普通にこんな感じに config/route.rb を書くと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:genres</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:books</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>urlはこんな感じになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="sr">/genres/</span><span class="mi">1</span><span class="o">/</span><span class="n">books</span>
</span></code></pre></td></tr></table></div></figure>


<p>1ってなんだよ! 1って!!</p>

<h2>urlにidじゃないものをつかう</h2>

<p>ジャンルのようなある程度数が決まっていて名前も変化しなさそうなのは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="sr">/genres/</span><span class="n">comic</span><span class="o">/</span><span class="n">books</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいなurlにできるとカッコイイですよね。</p>

<p>genre_books_path(genre) のメソッドで、genre.idではなくgenre.nameにできれば上手くいきそうです。
このメソッドを調べると(追っていくのメチャメチャ難しかった)、
どうやら to_param というメソッドを経由して id が呼ばれていました。
このto_paramを書き換えてnameを返すようにしてしまっていいのでしょうか?</p>

<p>そこで <a href="http://api.rubyonrails.org">http://api.rubyonrails.org</a> でto_paramを探すと、「ActionPackでurlを作るときに使うよ!」と、
しかもまさにやりたいことそのままのサンプルコードが置いてありました。</p>

<p>というわけで <strong>to_param を書き換えてしまえばid以外にも自由にurlを作れる</strong> ことがわかりました。</p>

<h2>to_param って・・・</h2>

<p>url作るキーを取得するメソッドが to_param ってそんなの検索できねーよ・・・
名付けがクソだと人生の貴重な時間を無駄にするという例でした。</p>

<h2>本当にやりたいこと</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="sr">/comics</span>
</span><span class='line'><span class="sr"> /no</span><span class="n">vels</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいなurlにしたい。 resourcesをきちんと使って。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Ruby on Supervisor With RVM]]></title>
    <link href="http://masarakki.github.com/blog/2013/02/14/supervisor-with-rvm/"/>
    <updated>2013-02-14T16:17:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2013/02/14/supervisor-with-rvm</id>
    <content type="html"><![CDATA[<h2>supervisorとは</h2>

<p>supervisorとは、pythonで書かれたプロセス監視ツールです。
簡単にインストールでき、デーモンとして動作し、
マシンブート時に任意のプログラムを立ち上げたり、そのプロセスが死んだ時に自動再起動などができます。</p>

<p>動かすプログラムは、単純な無限ループするようなコードでよく、
プロセス永続化などの面倒な仕事は全部supervisorに任せてしまえます。</p>

<h2>RVMで使う時の問題点</h2>

<p>RVMは個人環境にrubyをインストールし、実行するためには環境変数の整備などが必要で、
通常はシェルの起動時に設定スクリプトを読み込んで上手いことやってくれます。
ですが、supervisorを使う場合その方法が取れないのでなんとかしないといけません。</p>

<p>supervisorはenvironmentで環境変数を設定できるのですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm env</span></code></pre></td></tr></table></div></figure>


<p>で出力した環境変数を使っても上手くいきませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command=which bundle</span></code></pre></td></tr></table></div></figure>


<p>は想定したpathを返すのですが、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command=bundle exec ...</span></code></pre></td></tr></table></div></figure>


<p>にすると bundle not found. と・・・</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command=cd /path/to/project ; bundle exec ...</span></code></pre></td></tr></table></div></figure>


<p>にしてみても、上手いこと解釈してくれないし、そもそもcdを見つけてくれません。 (シェル組み込みコマンドだから?)</p>

<p>もう意味わかりません。</p>

<h2>そう言えば昔wrapperってあったよね</h2>

<p>そういえば昔まだbundlerがなくてpassengerが主流だったときは、
rvm wrapper とかいうのやってそれを使えって書いてあるサイトが多かったと思います。
なんかマルっと環境を上手いことやってくれるものだっていう認識でした。
試してみましょう。</p>

<p>なんか適当に名前を付けてwrapperを作ります。
gemsetも一緒に hoge_task とかの名前にします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm wrapper 1.9.3-p385@hoge_task hoge_task bundle</span></code></pre></td></tr></table></div></figure>


<p>これで $HOME/.rvm/bin に hoge_task_bundle というコマンドができあがりました。
実際にフルパスでこのコマンドを叩くと hoge_task のgemsetを使ってbundleが動いているのがわかります。
supervisorのcommandの設定にこれを使えば良さそうです。</p>

<p>supervisorの設定ファイルは全体でこんな感じです</p>

<h3>/etc/supervisor/conf.d/hoge_task.conf</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[program:hoge_task]
</span><span class='line'>command=/home/{USERNAME}/.rvm/bin/hoge_task_bundle exec rackup -p 8000
</span><span class='line'>autostart=true
</span><span class='line'>autorestart=true
</span><span class='line'>stopsignal=QUIT
</span><span class='line'>stdout_logfile=/var/log/hoge_task/out.log
</span><span class='line'>stderr_logfile=/var/log/hoge_task/err.log
</span><span class='line'>user={USERNAME}
</span><span class='line'>diretory=/home/{USERNAME}/projects/hoge_task</span></code></pre></td></tr></table></div></figure>


<p>あとは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo supervisorctl reload
</span><span class='line'>$ sudo supervisorctl status</span></code></pre></td></tr></table></div></figure>


<p>とかやって設定を読み込み直し、結果を見てみましょう。
多分うまく動き出してるはずですよ!</p>

<h2>Gemfileやruby自体の更新</h2>

<p>プログラムを変更してGemfileが変わった時や、
rubyのバージョンアップをした時などはどうなるのでしょうか?</p>

<p>これもGemfileのアップデートなら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<p>で、いつもどおりgemをインストールした後、(もちろん @hoge_task のgemsetを使って!)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo supervisorctl restart hoge_task</span></code></pre></td></tr></table></div></figure>


<p>でプロセスを再起動すればいいはずです。</p>

<p>rubyを更新した場合は、新しいバージョンを指定してrvm wrapperを作りなおせば、
hoge_task_bundle の中身が書き換えられるので、supervisorの設定はそのままで大丈夫です。
あとは上と同様に bundle install してプロセスの再起動を指示します。</p>

<h2>もう何も怖くない</h2>

<p>これはsupervisorの設定と言うよりむしろ、
ユーザ環境にインストールされたrvmをシステムに近いところで使う汎用的な方法のようです。
自動でrackアプリを起動したり、バックグラウンドでタスクを回したり、いろいろできるようになりました。</p>

<p>というわけで仕事で使うメモでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travis CIでrubyのC拡張が入ったgemのテストをする方法]]></title>
    <link href="http://masarakki.github.com/blog/2012/11/04/how-to-travis-a-gem-with-c-extension/"/>
    <updated>2012-11-04T17:11:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/11/04/how-to-travis-a-gem-with-c-extension</id>
    <content type="html"><![CDATA[<h2>No Such File</h2>

<p>C拡張が含まれたgemをそのままTravisに流してみると、</p>

<pre><code>$ bundle exec rake
56/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/bin/ruby -S rspec spec/jpeg_spec.rb
57/home/vagrant/builds/masarakki/jpeg/spec/../lib/jpeg.rb:2:
  in `require': no such file to load -- jpeg.so (LoadError)
</code></pre>

<p>自分でコンパイルしないといけないみたいですね。</p>

<h2>とりあえずやってみた</h2>

<p>試しに.travis.ymlでコンパイルの命令を追加してみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cd ext ; ruby extconf.rb ; make install</span>
</span></code></pre></td></tr></table></div></figure>


<p>やった! Travisがテスト全部通したよ!!!</p>

<p>Travisの実行ログを見てみると、</p>

<pre><code>55$ cd ext ; ruby extconf.rb ; make install
56checking for jpeglib.h... yes
57checking for main() in -ljpeg... yes
58creating Makefile
59gcc -I. -I. -I/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/i686-linux -I. -DHAVE_JPEGLIB_H  -D_FILE_OFFSET_BITS=64  -fPIC -g -O2  -fPIC   -c jpeg.c
60gcc -I. -I. -I/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/i686-linux -I. -DHAVE_JPEGLIB_H  -D_FILE_OFFSET_BITS=64  -fPIC -g -O2  -fPIC   -c jpeg_error.c
61gcc -I. -I. -I/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/1.8/i686-linux -I. -DHAVE_JPEGLIB_H  -D_FILE_OFFSET_BITS=64  -fPIC -g -O2  -fPIC   -c jpeg_jpeg.c
62gcc -shared -o jpeg.so jpeg.o jpeg_error.o jpeg_jpeg.o -L. -L/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -Wl,-R/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -L.  -rdynamic -Wl,-export-dynamic    -Wl,-R -Wl,/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -L/home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib -lruby -ljpeg  -lrt -ldl -lcrypt -lm   -lc
63/usr/bin/install -c -m 0755 jpeg.so /home/vagrant/.rvm/rubies/ruby-1.8.7-p358/lib/ruby/site_ruby/1.8/i686-linux



    ＿人人人人人人人人人＿
    ＞　site_ruby の下　＜
    ￣^Y^Y^Y^Y^Y^Y^Y^￣
</code></pre>

<p>これはダメですねヤバイですねやっちゃダメですね。</p>

<h2>rake-compiler を使う</h2>

<p><a href="https://github.com/luislavena/rake-compiler">rake-compiler</a> というgemを使うと上手いことやってくれるようです。</p>

<h4>gem追加</h4>

<p>Gemfileに以下を追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake-compiler&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>んで</p>

<pre><code>$ bundle install
</code></pre>

<h4>タスク追加</h4>

<p>Rakefileに以下を追加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">RUBY_PLATFORM</span> <span class="o">=~</span> <span class="sr">/java/</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;rake/javaextensiontask&#39;</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">JavaExtensionTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;GEM_NAME&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;rake/extensiontask&#39;</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">ExtensionTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;GEM_NAME&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>rake-compiler流にディレクトリ構成を直す</h4>

<p>ext直下にextconf.rbがある場合は、ext/GEM_NAME/extconf.rb の形になるようにディレクトリ構成を変更します。</p>

<h4>ためしてみる</h4>

<p>rake compile してみる</p>

<pre><code>$ rake compile
mkdir -p tmp/x86_64-linux/jpeg/1.9.3
cd tmp/x86_64-linux/jpeg/1.9.3
/home/masaki/.rvm/rubies/ruby-1.9.3-p194/bin/ruby -I. ../../../../ext/jpeg/extconf.rb
checking for jpeglib.h... yes
checking for main() in -ljpeg... yes
creating Makefile
cd -
cd tmp/x86_64-linux/jpeg/1.9.3
make
compiling ../../../../ext/jpeg/jpeg_jpeg.c
../../../../ext/jpeg/jpeg_jpeg.c: In function ‘jpeg_jpeg_exit’:
../../../../ext/jpeg/jpeg_jpeg.c:32:5: warning: format not a string literal and no format arguments [-Wformat-security]
compiling ../../../../ext/jpeg/jpeg.c
compiling ../../../../ext/jpeg/jpeg_error.c
linking shared-object jpeg.so
cd -
install -c tmp/x86_64-linux/jpeg/1.9.3/jpeg.so lib/jpeg.so
</code></pre>

<p>環境が汚れなさそうなのは確認できましたね。</p>

<p><em>warning直さないと・・・</em></p>

<h4>travisに教える</h4>

<p>.travis.yml に以下を追加 (もちろん前のは消して)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'> <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">rake compile</span>
</span></code></pre></td></tr></table></div></figure>


<h4>travisのログ確認</h4>

<pre><code>39$ rake compile
40mkdir -p tmp/i686-linux/jpeg/1.8.7
(中略)
54install -c tmp/i686-linux/jpeg/1.8.7/jpeg.so lib/jpeg.so
</code></pre>

<p>環境も汚してないしテストも通りました! やったね!</p>

<h2>参考</h2>

<ul>
<li><a href="https://travis-ci.org/#!/masarakki/jpeg">Travisの実行結果</a></li>
<li><a href="https://github.com/masarakki/jpeg">テスト対象プロジェクト</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自宅鯖があぼーんした]]></title>
    <link href="http://masarakki.github.com/blog/2012/10/30/home-server-aboned/"/>
    <updated>2012-10-30T02:26:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/10/30/home-server-aboned</id>
    <content type="html"><![CDATA[<h2>事の起こり</h2>

<p>今日の朝起きたらtwitterのリロードができなくてブラウザが腐ったのかと思った。
ブラウザ再起動しても状況改善せず。
よくよく気づいてみたら妙に部屋が静かだ・・・ 見てみたらサーバちゃん息してないの・・・
サーバマシンはPPPoE接続とルーティングもやらせていたのでそれも止まってしまったという状態。</p>

<h2>サーバの状況</h2>

<p>起動してみたらfsckしろよクソって言われた。
(最近ずっと怪しかったけど)ディスクやべーのかなぁ、
(ずっと気にかかってたけど)とうとう逝ったのかなぁ、
(ここ数年ずっとそうだけど)カネねえなぁとか思いながらfsck実行してみる。
fsckが全然終わらなくてそのままにして仕方なく仕事行く。</p>

<p>仕事終わって家に帰ったら妙な臭いがする。
サーバの電源落ちてる。</p>

<h2>なぜ落ちてたか</h2>

<p>もっかい電源入れてみる。
なんか定期的にブンって音がするような気がする。
箱の中覗いてみたらCPU1のファンが数秒に1回、数センチしか動いてない!!
CPU2のファンなんて全く動いてない!!!
ケースの一部が透明になってるのが初めて役に立った。</p>

<p>ファンを指で回してみようと思ったけど硬くて動かない。
ホコリとか詰まって硬くなってるのかな?
ファン外してみたらCPU表面が焦げてるような感じ。
臭いの理由と電源落ちてた理由はこれか・・・</p>

<p>シングルユーザモードでの起動はギリギリ大丈夫なようだ</p>

<h2>ネットワーク復旧作業</h2>

<p>とりあえず起動してfsckだけ終わらせた。
/homeは巨大なのでとりあえず無視。
/usrが読めるようになったのでとりあえずPPPoEの設定が読めた。
無線LAN構築に使ってるAPがルータにもなるのでPPPoEを喋らせてみる。
設定ドキュメントがなかなか難しくて困った。
なんで家電化された機器はあんなに設定が難しいんだろう・・・
ネットワーク構成変更中にAPをもともと繋いでたはずのLANケーブルが消失する。
どこいったんや・・・
死んだサーバを繋ぐケーブルがない。</p>

<p>fsckが終わってディスクのマウントできるようになった。
通常起動もできるはずだが、起動プロセス中にリブートかかる。
ここから先は無理っぽい。</p>

<h2>障害範囲</h2>

<ul>
<li>ネットワーク全般

<ul>
<li>APをルータにして復帰</li>
</ul>
</li>
<li>web

<ul>
<li>全部herokuに移してしまおうかと画策</li>
<li>この時期コミケ準備会とか見に来るっぽいからまじヤバイ タイミング最悪</li>
<li>mysqlのデータdumpだるい</li>
</ul>
</li>
<li>ストレージ

<ul>
<li>一部復旧できないかも</li>
<li>大量のエロ画像の運命は!?</li>
</ul>
</li>
</ul>


<h2>サーバ復旧作業予定</h2>

<ul>
<li>新しくCPUファン買って付け直せばなんとか起動してくれるかなぁ・・・

<ul>
<li>AM2時代のOpteron用ファンなんて見つかるのかね</li>
</ul>
</li>
<li>webサーバはクラウドに持って行きたいなぁ</li>
<li>ストレージだけ手元に持たないといけないからそれどうしよう</li>
<li>確か1TBのディスクが入ってるからそれ経由して他のマシンのHDDにデータ移動できるかな

<ul>
<li>RAIDがむしろ邪魔</li>
</ul>
</li>
<li>圧倒的にカネが足りない</li>
</ul>


<h2>突然ネットワークが使えなくなって気づいたこと</h2>

<ul>
<li>LANケーブル何本か余分に持っていたほうがいい</li>
<li>テザリングさえあれば何とかなる</li>
<li>タブレット超便利</li>
<li>視覚よりも聴覚・嗅覚</li>
<li>nasneはネットワークが切れてPS3から見えてなくても問題なく動く

<ul>
<li>繋げた瞬間に録画済み動画がどかっと増えた</li>
<li>障害中のもバッチリ撮れてた</li>
<li>上手く設計できてると感心した</li>
</ul>
</li>
<li>ファンが回らなくなったのは初めて サーバ止めずに掃除とかできんの?</li>
<li>トラブル楽しい

<ul>
<li>嘘。死ね</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem-src]]></title>
    <link href="http://masarakki.github.com/blog/2012/10/18/gem-src/"/>
    <updated>2012-10-18T00:13:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/10/18/gem-src</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/amatsuda/gem-src">gem-src</a> がすごく便利。</p>

<h2>よくあるパターン</h2>

<h3>1. gemのソースコードを読みたい時</h3>

<p>gemを使ってるとソースをがっつり追いたくなる時がありますが、そんな時どうしてますか?
最近編み出したのが、とりあえずインストールされたgemをgitに突っ込むというワザです。</p>

<p>rvmを使っているのでこんな感じに。</p>

<pre><code>$ cd ~/.rvm/gems/ruby-1.9.4-p194@hoge/gems/hoge_gem
$ git init; git add .
$ git grep hogehoge
</code></pre>

<p>これでも十分に便利ですけど、gemのディレクトリまで行くのが面倒ですよねー。</p>

<h3>2. gemに Pull Request したい時</h3>

<p>gemの名前は知っていても誰が作ったかなんて覚えてませんよね。
hubコマンドもユーザ名がわからないと使えません。
(なぜか hub clone rails はできるんだけどなんでだろう・・・)
結局githubで検索してリポジトリを探さないといけません。</p>

<h2>gem-srcを使う</h2>

<p>gem-srcを使うと、gem install した時に同時にgithubからソースコードを git clone してくれます。
その前に .gemrc にダウンロードするディレクトリを設定しておきましょう。</p>

<pre><code>$ echo "gemsrc_clone_root: ~/src/gems" &gt;&gt; ~/.gemrc
</code></pre>

<p>この状態でgem install してみましょう。</p>

<pre><code>$ gem install ero_getter
Fetching: zipruby-0.3.6.gem (100%)
Building native extensions.  This could take a while...
Fetching: ero_getter-1.6.0.gem (100%)
Cloning into '/home/masaki/src/gems/ero_getter'...
remote: Counting objects: 665, done.
remote: Compressing objects: 100% (310/310), done.
remote: Total 665 (delta 306), reused 634 (delta 278)
Receiving objects: 100% (665/665), 274.95 KiB | 165 KiB/s, done.
Resolving deltas: 100% (306/306), done.
Successfully installed zipruby-0.3.6
Successfully installed ero_getter-1.6.0
2 gems installed

$ ls ~/src/gem
./  ../  ero_getter/  gem-src/
</code></pre>

<p>入りましたね!</p>

<pre><code>$ cd ~/src/gem/ero_getter
$ git remote show origin
* remote origin
  Fetch URL: http://github.com/masarakki/ero_getter
    Push  URL: http://github.com/masarakki/ero_getter
</code></pre>

<p>hubでforkした時と同じ状態なのでそのままhubコマンドでforkも Pull Request もできそうです。</p>

<pre><code>$ hub fork
$ hub pull-request
</code></pre>

<p>やったーforkできたよー多分 Pull Request もできるよー</p>

<h2>条件</h2>

<p>gemのメタデータにあるhomepageの項目がgithubっぽかったらcloneするらしいです。
なのでみんなhomepageはgithubのurlにしましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ゆっくりにアクセントをつけてみた]]></title>
    <link href="http://masarakki.github.com/blog/2012/10/07/make-yukkuri-to-use-accent/"/>
    <updated>2012-10-07T03:21:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/10/07/make-yukkuri-to-use-accent</id>
    <content type="html"><![CDATA[<h2>あらすじ</h2>

<p><em><a href="http://masarakki.github.com/blog/2012/09/22/yukkurid/">前回</a>、
棒読みちゃんと同じAquesTalkという音声合成エンジンを使い、
Linuxでも棒読みができるアプリケーションyukkuriを作った俺。</em></p>

<p><em>ところがこのyukkuriには致命的な欠陥があったのだ!!</em></p>

<h2>実際に喋らせてみた</h2>

<p>棒読みちゃん以上に棒読みだった。
完全に真っ平ら。ぺったんこ。
<strong>実は棒読みちゃんは棒読みじゃなかった</strong></p>

<p>どうやらAquesTalkは自分でアクセント記号を付けないといけないようです。
棒読みちゃんにもアクセント付きに変換された文字列が表示されます。</p>

<h2>アクセントの付け方</h2>

<p>やはりこのままmecabを使いたいので 「mecab アクセント」 でぐぐってみたところ、
<a href="http://www.tokuteicorpus.jp/dist/">Unidic</a>というmecab用アクセント辞書があるようです。
これを組み込めばアクセントがうまく処理できそうです。</p>

<p>アクセントの仕様はかなり複雑なので一部から実装していきます。
実際にニコ生で使って気になるアクセントがあったらテストを書いて修正していくという方法を取ります。</p>

<h2>アクセントのテストデータ</h2>

<p>アクセントの処理を実装するにあたって、もちろんテストデータが必要になります。</p>

<h4>方法1. 棒読みちゃんに喋らせてみてアクセント付き文字列を使う</h4>

<p>残念ながらLinuxではWineを使っても棒読みちゃんが動かなかったので断念。</p>

<h4>方法2. TASETのデモページを使う</h4>

<p><a href="https://sites.google.com/site/suzukimasayuki/accent">CRFを用いたアクセント結合推定</a>
というなんか難しいサイトの <a href="http://www.gavo.t.u-tokyo.ac.jp/~suzuki/taset_demo/">デモページ</a>
で文章にアクセントをつけることができます。
ただし変換にかなり時間がかかり、実際に喋らせてみるとなんかちょっと変です。</p>

<h4>方法3. 聞く</h4>

<p>2で作ったアクセントを実際に喋らせてみて、
自然に聞こえるように微調整するのが一番良さそうです。</p>

<p>ただし、細かい部分では<strong>正しい</strong>日本語の発音なんてのは知らないので、
こんなもんなのかで済ませます。</p>

<h2>結果</h2>

<p>たぶん棒読みちゃんより正確なアクセントが付けれるようになった。
確認は<a href="https://github.com/masarakki/yukkurid">コード</a>を実行してみるか、
<a href="http://com.nicovideo.jp/community/co600306">ニコ生の放送</a>を見てくださいな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yukkurid]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/22/yukkurid/"/>
    <updated>2012-09-22T06:59:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/22/yukkurid</id>
    <content type="html"><![CDATA[<p><em>ゆっくりしていってね!</em></p>

<h2>yukkuridとは?</h2>

<p>棒読みちゃん+デーモン</p>

<p>ニコ生をするのに欠かせないの棒読みちゃんというWindowsアプリがありますが、
もちろんWindowsアプリなのでLinuxでは動きませんしWineで動くとしても動かしたくないですよね。</p>

<p>でもやっぱり棒読み機能がないと不便なので作ってみました。</p>

<p><a href="https://github.com/masarakki/yukkurid">yukkurid</a></p>

<h2>棒読み部分</h2>

<p>棒読みちゃんは内部で<a href="http://www.a-quest.com/">AquesTalk2</a>という読み上げライブラリを使用していて、
これはWindows版だけでなくMacOS版とLinux版のライブラリも配布されています。
<strong>(ただし有料)</strong></p>

<p>棒読みにはそんなに機能は必要無いので、ほとんどサンプルファイルをそのままコンパイルして、
十分実用なバイナリになりました。</p>

<h2>デーモン部分</h2>

<p>sinatraでちょちょっと作って終了です。
POSTで受け取ったデータを、漢字が読めない棒読みちゃんのためにmecabで読みに変換して、
棒読みちゃんに渡して吐かれたwavをALSAに食わせる。
ワンライナーで瞬殺です。</p>

<p>これでPOSTで送信するとコンピュータがゆっくり喋ってくれるようになりました!</p>

<h2>次の展望</h2>

<p>デーモンにさえすれば、実際にニコ生のコメントをchrome extensionから送信して、
コンピュータが喋ってくれるようになるはずです。
EroGetterの時もそうだったけどいちいちデーモンにするのがめんどくさいですがしかたないですね・・・</p>

<p>というわけでchrome extensionのコメビュを作るか既存のをどっかからパクってきて繋ぎこみたいと思います。</p>

<p>あとは今だと喋ってる間ブロックするので非同期化と、それにともなってちゃんとしたキューイングを。</p>

<h2>ところで</h2>

<p><a href="http://www.a-quest.com/licence_free.html">非商用の個人の開発ライセンス</a>を買ったのですが、</p>

<ul>
<li>アプリの機能として、外部ソフトから当社製品ライブラリの機能を呼び出し可能なインターフェースを持たないこと。</li>
</ul>


<p>ってどういうことなんだろう?
これをラップした raques.gem みたいなのは作っちゃダメなのかな?
.soと.hは自分で用意してねっていう形でならok?
といっても今コンパイル済みバイナリを ./bin/yukkuri に置いてるけど、これも.so無いと動かないよね?
かといって.so同梱できるようなライセンスじゃないよね? そんなんしたら商売上がったりだよね?
あんまC方面わからんからこのライセンスが一体何をしてよくて何をしていけないのかわからない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsログでJSONの一部を隠す方法]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/20/how-to-hide-json-values-in-loggin/"/>
    <updated>2012-09-20T05:10:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/20/how-to-hide-json-values-in-loggin</id>
    <content type="html"><![CDATA[<p>Rails のログ出力には filter_parameters という一部のパラメータを隠す便利な機能があります。</p>

<p>デフォルトでは config/application.rb に</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_parameters</span> <span class="o">+=</span> <span class="o">[</span><span class="ss">:password</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書かれています。</p>

<p>ここにフィルタしたいパラメータを追加すれば [FILTERED] という文字列に置き換えられます</p>

<p>例えば開発者が user_id を見てはいけない社内ルールがある場合</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">filter_parameters</span> <span class="o">+=</span> <span class="o">[</span><span class="ss">:password</span><span class="p">,</span> <span class="ss">:user_id</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすればいいわけです。</p>

<h2>ためしてみる</h2>

<h3>GETの場合</h3>

<pre><code>GET /posts?password=abc123
</code></pre>

<p>を叩いた場合ログに</p>

<pre><code>Started GET "/posts?password=[FILTERED]" for 127.0.0.1 at 2012-09-20 05:16:44 +0900
Processing by PostsController#index as HTML
  Parameters: {"password"=&gt;"[FILTERED]"}
</code></pre>

<p>とURLもパラメータも [FILTERED] に変えられて出力されます。</p>

<h3>POSTの場合</h3>

<pre><code>POST /posts
data: password=abc123
</code></pre>

<p>を叩いた場合ログは</p>

<pre><code>Started POST "/posts" for 127.0.0.1 at 2012-09-20 05:18:12 +0900
Processing by PostsController#create as */*
  Parameters: {"password"=&gt;"[FILTERED]"}
</code></pre>

<p>上手いことフィルタされますね。</p>

<p>Rails の標準的なPOSTパラメータ形式の :post => {:password => &ldquo;abc123&rdquo;} はどうでしょうか</p>

<pre><code>Started POST "/posts" for 127.0.0.1 at 2012-09-20 05:22:33 +0900
Processing by PostsController#create as */*
  Parameters: {"post"=&gt;{"password"=&gt;"[FILTERED]", "title"=&gt;"unko"}}
</code></pre>

<p>これもきちんとフィルタできてます。</p>

<h2>特殊な事情</h2>

<p>ある特殊な事情から「パラメータは json というキーに json 文字列で入ってくる」というプロジェクトがある場合どうなるでしょうか?
ほんとにそんなプロジェクトがあるんでしょうか? ファックですね。
どうせ原因はこのAPIを叩いてくるphpが低脳だからに違いありません。</p>

<pre><code>POST "/post"
data: json={\"password\":\"abc123\"}
</code></pre>

<p>という状況です。 ためしてみましょう。</p>

<pre><code>Started POST "/posts" for 127.0.0.1 at 2012-09-20 05:30:56 +0900
Processing by PostsController#create as */*
  Parameters: {"json"=&gt;"{\"password\":\"abc123\"}"}
</code></pre>

<p>残念、丸見えです! かと言って :json を全部フィルタするのは開発の妨げになってしまいます。</p>

<h3>一番かっこ悪い解決方法</h3>

<p>filter_parameters には、|key, value| を引数に取る lambda を指定することもできるようです。
サンプルでは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">reverse!</span> <span class="k">if</span> <span class="n">k</span> <span class="o">=~</span> <span class="o">%</span><span class="n">rsecret</span><span class="o">/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書かれていますが、reverse! と破壊的メソッドを使っているのがすごく嫌な予感がします。
どうやら value のオブジェクトを破壊的に変更しないといけないようです。</p>

<p>こんな感じで書いてみました。</p>

<div><script src='https://gist.github.com/3752166.js'></script>
<noscript><pre><code>config.filter_parameters += [:password, lambda {|k, v|
   if k.to_sym == :json
     json = JSON.parse(v).symbolize_keys
     json[:password] = &quot;[FILTERED]&quot; if json.has_key?(:password)
     v.replace json.to_s
   end
}]</code></pre></noscript></div>


<p>ログの出力結果は</p>

<pre><code>Started POST "/posts" for 127.0.0.1 at 2012-09-20 05:49:22 +0900
Processing by PostsController#create as */*
  Parameters: {"json"=&gt;"{:password=&gt;\"[FILTERED]\"}"}
</code></pre>

<p>上手くいってます!!</p>

<p>ポイントは v.replace でオブジェクト自体は変えずに文字列を変更してる点です。
これを</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">to_s</span>
</span></code></pre></td></tr></table></div></figure>


<p>とやってしまうと上手く動きません。</p>

<p>とりあえずこれで泣く泣く json の入力すべてを捨てる必要はなくなりました。 やった!!</p>

<h3>問題点</h3>

<ul>
<li>[FILTERED] が定義されているクラスのファイルを require してもクラスが存在しないと言われる? ロード順の問題?</li>
<li>普通に指定されたフィルタしたいパラメータを lambda 内で再利用できない

<ul>
<li>lambda での指定は最後に評価されるので</li>
<li>before_filter (<strong>まさに!</strong>) があれば解決?</li>
</ul>
</li>
</ul>


<h2>ほんとにやりたい一番かっこいい解決方法</h2>

<p>:json が渡ってきた場合は filter とかする前に JSON.parse してハッシュにしたい。
そうすれば普通に filter_parameters += [:password, :user_id] を指定するだけで、
:post => {:password => &ldquo;abc123&rdquo;} がフィルタできたのと同様にフィルタできるはず。</p>

<p>次はこれを調べる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EroGetter With Your Favorite Site!]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/18/erogetter-with-your-favorite-site/"/>
    <updated>2012-09-18T08:06:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/18/erogetter-with-your-favorite-site</id>
    <content type="html"><![CDATA[<h2>EroGetter対応サイトを増やす</h2>

<p>サイト定義を書くことで対応サイトを増やすことができます。</p>

<h3>準備するもの</h3>

<ul>
<li>まともな(ry</li>
<li>対象サイト

<ul>
<li>記事urlの正規表現</li>
<li>サイト名</li>
</ul>
</li>
<li>エロにかける情熱</li>
</ul>


<p>今回追加するサイトは <strong><a href="http://example.com/archives/\d.html">http://example.com/archives/\d.html</a> えろいぐざんぷるどっとこむ</strong> とします。</p>

<h4>ダウンロード</h4>

<pre><code>git clone git://github.com/masarakki/ero_getter.git
cd ero_getter
bundle install
git checkout -b add_example_dot_com
</code></pre>

<h4>クラス名の決定</h4>

<p>サイト名が <strong>えろいぐざんぷるどっとこむ</strong> なのでクラス名は <strong>EroExample</strong> とします。
通例に従って、ファイル名などは <strong>ero_example</strong> のようなスネークケースになります。</p>

<h4>サンプルファイルの追加</h4>

<pre><code>mkdir spec/samples/ero_example
wget http://example.com/archives/1234567.html -o spec/samples/ero_example/sample.html
</code></pre>

<p>その1〜 のように連番になっているサイトの場合は先頭、中間、最後のファイルをそれぞれ別名で保存してください。</p>

<h4>テストの追加</h4>

<p><em>spec/downloader/</em> にある他のサイト定義のファイルをコピーして、
<strong>spec/downloader/ero_example_spec.rb</strong> を作ります。
連番サイトは <em>nijigazou_sokuhou_spec.rb</em>、 そうでないサイトはそれ以外のファイルがいいでしょう。</p>

<p>ファイルを開いてそれっぽいところを変更します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">EroExample</span> <span class="k">do</span>                                     <span class="c1"># クラス名を変更</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@dl</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:url</span><span class="p">)</span> <span class="p">{</span> <span class="s1">&#39;http://example.com/archives/1234567.html&#39;</span> <span class="p">}</span> <span class="c1"># urlを変更</span>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">FileUtils</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:mkdir_p</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dl</span> <span class="o">=</span> <span class="no">EroExample</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>                              <span class="c1"># クラスを変更</span>
</span><span class='line'>    <span class="n">fake</span><span class="p">(</span><span class="ss">:get</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="s1">&#39;ero_example/sample.html&#39;</span><span class="p">)</span>             <span class="c1"># サンプルファイルを変更</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="ss">:sub_directory</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;1234567&#39;</span> <span class="p">}</span>              <span class="c1"># サブディレクトリ名を変更</span>
</span><span class='line'>  <span class="n">its</span><span class="p">(</span><span class="s2">&quot;targets.count&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="o">==</span> <span class="mi">26</span> <span class="p">}</span>                    <span class="c1"># サンプルファイルの画像数に変更</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>rspec spec/downloader/ero_example_spec.rb
</code></pre>

<p>を実行してFailがひとつも出なくなるようにサイト定義をいじります。</p>

<p>別のターミナルを立てて</p>

<pre><code>bundle exec guard start
</code></pre>

<p>でguardを動かしてCIすることもできます。</p>

<h4>サイト定義の追加</h4>

<p><strong>lib/downloader/ero_example.rb</strong> に、 <strong>EroGetter::Base</strong> を継承したクラスを作ります。
対象サイトがLivedoorBlogの場合は、 <strong>EroGetter::Livedoor</strong> が使える場合もあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EroExample</span> <span class="o">&lt;</span> <span class="no">EroGetter</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="nb">name</span> <span class="s1">&#39;えろいぐざんぷるどっとこむ&#39;</span>
</span><span class='line'>  <span class="n">url</span> <span class="sr">%r{http://example.com/archives/\d+.html}</span>
</span><span class='line'>  <span class="n">target</span> <span class="s2">&quot;a &gt; img.ero-file&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag</span><span class="o">|</span>
</span><span class='line'>     <span class="n">tag</span><span class="o">.</span><span class="n">parent</span><span class="o">[</span><span class="ss">:href</span><span class="o">]</span> <span class="k">if</span> <span class="n">path</span><span class="o">.</span><span class="n">parent</span><span class="o">[</span><span class="ss">:href</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/jpe?g|gif|png/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">sub_directory</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">url</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(\d).html/</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">filename</span> <span class="p">{</span><span class="o">|</span><span class="kp">attr</span><span class="o">|</span> <span class="s2">&quot;%04d%s&quot;</span> <span class="o">%</span> <span class="o">[</span><span class="kp">attr</span><span class="o">[</span><span class="ss">:index</span><span class="o">]</span><span class="p">,</span> <span class="kp">attr</span><span class="o">[</span><span class="ss">:ext</span><span class="o">]]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>肝になるのは <strong>target</strong> のところです。
targetで取得したい画像のurlを集める方法を指定します。</p>

<p>targetの引数には取得したいタグをcssで指定します。
そのタグに対してブロックの処理をしてurlを取得します。
最終的に、 <strong>画像のurlの文字列</strong> を集めなければならないことに注意してください。
(ただタグを返すだけだとurl文字列ではないということです)</p>

<p>この例の場合、aタグ直下の、クラスにero-fileが付けられたimgタグを全部持ってきて、
その親要素のhref属性が画像ファイルなら、そのhrefを文字列として返す、という条件になります</p>

<p>rspecを走らせて、取得した画像の件数が一致するまでtargetを調整しましょう。</p>

<h4>連番サイト</h4>

<p>その1〜 など連番で記事が作られるサイトは、ひとつの記事から全てのページを取得する設定が可能です。</p>

<p><em>lib/downloader/nijigazou_sokuhou.rb</em> を参考にしましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">connection</span> <span class="o">[</span><span class="s1">&#39;a[rel=prev]&#39;</span><span class="p">,</span> <span class="s1">&#39;a[rel=next]&#39;</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>    <span class="n">path</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="no">Regexp</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">title_part</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">title_part</span>
</span><span class='line'>     <span class="n">title</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(.+?)(その.+)?$/</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>connection</strong> で前後のページへのリンクをcssの配列で指定します。
ブロックを渡してtrue/falseを返すことで、そのリンクを本当に取得するかどうかを調整できます。
この場合、タイトルの「その〜」より前の部分が一致したら本当に取得する事になります。</p>

<p>rspecも <em>spec/downloader/nijigazou_sokuhou_spec.rb</em> を参考に、
前後ページが正しく取得できるか、次がなければnilになるか、をテストしましょう。</p>

<h4>Pull Request</h4>

<p>あとはPull Requestすれば取り込まれます。
Pull Requestの前にはコミットをひとつにまとめるとかっこいいですよ。</p>

<pre><code>git rebase -i HEAD~10 (十分大きい数字)
</code></pre>

<p>コミットIDの前の文字列を <strong>s</strong> にすると、その前のコミットと合成されます。
作業をひとつのコミットにまとめて、コミットメッセージを適切なものに直し、
pushしてPull Requestで完成です!</p>

<p><em>Enjoy!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use EroGetter]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/16/how-to-use-ero-getter/"/>
    <updated>2012-09-16T18:12:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/16/how-to-use-ero-getter</id>
    <content type="html"><![CDATA[<p><em>快適エロ生活はEroGetterで。</em></p>

<h2>EroGetterとは?</h2>

<p>エロ画像収集に特化したダウンローダーです。
汎用ダウンローダーを使う場合に必要になる、余計なURLを除外したり、保存場所を指定したりといった面倒な部分を極力排除してあります。
サーバとしても動作するので自宅サーバに立てておけば会社にいながら今夜のオカズを集めておくこともできます。</p>

<p>サイト定義を追加してプルリクエストすることにより対応サイトを増やすことができます。</p>

<h2>使い方</h2>

<p>収集だけが目的の場合はこれだけでokです</p>

<h3>用意するもの</h3>

<ul>
<li>まともにRubyが動くまともなOSのコンピュータ

<ul>
<li>つまりWindowsでの動作報告を待っています</li>
</ul>
</li>
<li>ruby-1.9.3のインストール</li>
<li>Google Chrome / Chromium</li>
</ul>


<h4>Chromeエクステンションのインストール</h4>

<pre><code>git clone git://github.com/masarakki/ero_getter_chrome_extension.git
cd ero_getter_chrome_extension
bundle install
#( src/ero_getter.coffee の url: を変更してero_getter_serverのホストを変更可能 )
make
</code></pre>

<p>Chromeエクステンションのページで ero_getter_chrome_extension のディレクトリを指定してインストール。
Chromeのアドレスバーの右側におっぱいアイコンが追加されたら成功です。</p>

<h4>サーバのダウンロード</h4>

<pre><code>git clone git://github.com/masarakki/ero_getter_server.git
cd ero_getter_server
bundle install
</code></pre>

<h4>バックグラウンドタスクの実行</h4>

<pre><code>rake backend:start
</code></pre>

<h4>サーバの起動</h4>

<pre><code>rackup -p 9393
</code></pre>

<p><a href="http://localhost:9393/">http://localhost:9393/</a> にアクセスするとサーバステータス、キュー、対象サイトのリストなどが見れます。</p>

<p>あとは対象画像サイトの記事ページでおっぱいアイコンをクリックすれば $HOME/ero_getter 以下に保存されます。</p>

<h3>更新</h3>

<pre><code>git pull origin master
</code></pre>

<p>更新があったら</p>

<pre><code>bundle install
rake backend:restart
kill -INT `cat rack.pid`
rackup -p 9393
</code></pre>

<p>とりあえず今回は使い方だけのまとめで終了ー</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Uploaded Files in Rails (With Unicorn)]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/15/remove-uploaded-files-in-rails-with-unicorn/"/>
    <updated>2012-09-15T15:19:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/15/remove-uploaded-files-in-rails-with-unicorn</id>
    <content type="html"><![CDATA[<p>Rails + unicorn環境でファイルアップロードを扱うと /tmp/RackMultipart&hellip; というファイルが作られなかなか消えません。
UploadedFileクラスの中身はTempfileなので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:file</span><span class="o">].</span><span class="n">close</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とかやってみてもやっぱり消えません。
どうやらunicornを再起動して少し経つとGCが起動して消えるような動作をします。</p>

<p>これに対処するため某社では5分に一度unicornを再起動しているようです。
これではまるで「僕なら、10リクエストごとにApacheを再起動しますね」と言ってるバカと一緒じゃないですか。
そんなのはよくないですよね。</p>

<p>というわけで色々やってみた結果 「すぐには消えないけど高々プロセス数以下のファイルしか残らない方法」 を見つけました</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">remove_uploaded</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tmp_path</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@tempfile</span><span class="p">)</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">file</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="ss">:@tempfile</span><span class="p">,</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このままッ!! nilを! こいつの! @tempfileに&hellip;&hellip;&hellip; つっこんで! 殴り抜けるッ!</p>

<p>これで/tmpが無限に肥大化することはなくなるようです</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ヘルパーメソッドのspecってどう書くの?]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/10/rspec_for_helper_method/"/>
    <updated>2012-09-10T11:24:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/10/rspec_for_helper_method</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/masarakki/simple_bootstrap_helpers">twitter-bootstrapのよくあるパターンを簡単にかけるヘルパーを集めたgem</a> を作ろうとしてみた
けどrspecの上手い書き方がわからない</p>

<p>例えばフォームの実行ボタン類を置くエリアを作るヘルパー</p>

<h4>helper</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_view&#39;</span>
</span><span class='line'><span class="k">module</span> <span class="nn">BootstrapHelpers</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">TagHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">actions</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">content_tag</span><span class="p">(</span><span class="ss">:div</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s1">&#39;form-actions&#39;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:include</span><span class="p">,</span> <span class="no">BootstrapHelpers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>使い方(haml)</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="p">=</span> <span class="n">actions</span> <span class="k">do</span>
</span><span class='line'>  f.button :submit, :class =&gt; &quot;btn btn-primary&quot;
</span></code></pre></td></tr></table></div></figure>


<p>一応これで使えるには使えるが
もちろんこれのrspecを書きたい</p>

<h4>helper_spec.rb</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">BootstrapHelpers</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">BootstrapHelpers</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;div.form-actionsで囲まれる&quot;</span> <span class="k">do</span>
</span><span class='line'>     <span class="n">tag</span> <span class="o">=</span> <span class="n">actions</span> <span class="k">do</span>
</span><span class='line'>        <span class="s1">&#39;hoge&#39;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>     <span class="n">tag</span><span class="o">.</span><span class="n">should</span> <span class="n">match</span> <span class="sr">/class=&quot;form-actions&quot;/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>みたいな感じで書けると思ったけど
実行してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`output_buffer=&#39; for #&lt;RSpec::Core::ExampleGroup::Nested_1::Nested_1:0x0000000241e5b8&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>どうやらblockを渡すと capture(&amp;block) される中でoutput_buffer=ねーよって言われるらしい
となるとblock渡すヘルパーはことごとくspecが書けないことになる</p>

<p>これ以上 helper_spec に余計なこと書かずにこのspecを実行できるようにするにはどうすればいいのだろうか?
(include BootstrapHelpers の1行だけでも十分余計である)</p>

<p>それともそもそも書き方の方針が大外れしてんのかねぇ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのテスト]]></title>
    <link href="http://masarakki.github.com/blog/2012/09/09/octopress/"/>
    <updated>2012-09-09T01:13:00+09:00</updated>
    <id>http://masarakki.github.com/blog/2012/09/09/octopress</id>
    <content type="html"><![CDATA[<p>とりあえずoctopressのセットアップしてみた</p>

<p>しかしこのリポジトリを他のコンピュータでpullしてきてrake deployしても更新が上手く行かない
あと _layout/custom/* をいじってもなかなか反映されない</p>

<p>とりあえず色々使ってみて試すしかないかー
文字小さくて読むの辛い</p>
]]></content>
  </entry>
  
</feed>
